using stock_tool.common;
using stock_tool.utils;
using System.Windows.Automation;
using System.Windows;
using System.Text.RegularExpressions;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using System;

namespace stock_tool.service;

class SubmitService1
{
    public void SubmitClick(object sender, RoutedEventArgs e)
    {
        e.Handled = true;
        Logger.Info("开始处理所有....");

        try
        {
            // 获取配置项
            string targetWindowTitle = GetConfigValue("TargetWindowTitle");
            string targetElementTitle = GetConfigValue("TargetElementTitle");

            // 查找目标窗口
            AutomationElement mainWindow = FindWindow(targetWindowTitle);
            if (mainWindow == null)
            {
                Logger.Info($"找不到【{targetWindowTitle}】，请运行程序");
                return;
            }

            ActivateAndMaximizeWindow(mainWindow);

            // 查找右边pannel
            AutomationElement targetWindow = FindElement(mainWindow, targetElementTitle);
            if (targetWindow == null)
            {
                Logger.Info($"找不到 【{targetElementTitle}】,请打开某商品");
                return;
            }

            // 删除临时文件
            string resultPath = GetConfigValue("ResultFilePath");
            string resultFile = resultPath + DateTimeOffset.UtcNow.ToString("yyyy-MM-dd HH-mm-ss") + ".txt";
            DeleteFile(GetConfigValue("CompareFilePath"));

            int maxCount = GetMaxCount(mainWindow);

            // 异步处理任务
            Task.Run(() =>
            {
                try
                {
                    Submit(maxCount, targetWindow);
                }
                catch (Exception ex)
                {
                    Logger.Error($"终止处理: {ex.Message}");
                }
            });
        }
        catch (Exception ex)
        {
            Logger.Error($"处理过程中出现错误: {ex.Message}");
        }
    }

    private string GetConfigValue(string key)
    {
        string value = Config.Get(key);
        if (string.IsNullOrEmpty(value))
        {
            throw new ArgumentException($"配置项 {key} 为空或未找到");
        }
        return value;
    }

    private AutomationElement FindWindow(string windowTitle)
    {
        return AutomationElement.RootElement.FindFirst(
            TreeScope.Children,
            new PropertyCondition(AutomationElement.NameProperty, windowTitle));
    }

    private void ActivateAndMaximizeWindow(AutomationElement window)
    {
        AutomationSearchHelper.TryActivateWindow(window);
        MaximizeWindow(window);
    }

    private AutomationElement FindElement(AutomationElement root, string elementTitle)
    {
        return root.FindFirst(TreeScope.Descendants,
            new PropertyCondition(AutomationElement.NameProperty, elementTitle));
    }

    private void DeleteFile(string filePath)
    {
        try
        {
            File.Delete(filePath);
        }
        catch (Exception ex)
        {
            Logger.Error($"删除文件 {filePath} 时出错: {ex.Message}");
        }
    }

    private void MaximizeWindow(AutomationElement targetWindow)
    {
        if (targetWindow.TryGetCurrentPattern(WindowPattern.Pattern, out object windowPatternObject))
        {
            WindowPattern windowPattern = (WindowPattern)windowPatternObject;
            if (windowPattern.Current.CanMaximize)
            {
                windowPattern.SetWindowVisualState(WindowVisualState.Maximized);
                Logger.Info("窗口已最大化。");
            }
            else
            {
                Logger.Info("窗口不支持最大化操作。");
            }
        }
    }

    private int GetMaxCount(AutomationElement mainWindow)
    {
        AutomationElement total = AutomationSearchHelper.FindFirstElementById(mainWindow, "lblTotal");
        if (total != null)
        {
            Match match = Regex.Match(total.Current.Name, @"\d+");
            if (match.Success)
            {
                return int.Parse(match.Value);
            }
        }
        return 0;
    }

    private void Submit(int maxCount, AutomationElement targetWindow)
    {
        int errorTime = 1;
        HashSet<string> processed = new HashSet<string>();

        AutomationElement targetButton = FindElementById(targetWindow, GetConfigValue("SubmitBtn"));
        if (targetButton == null)
        {
            Logger.Info("未找到提交按钮。");
            return;
        }

        Point buttonCenter = GetElementCenter(targetButton);
        string max = GetConfigValue("maxNum");

        for (int i = 1; i <= maxCount; i++)
        {
            try
            {
                if (!MainWindow.IsProcess())
                {
                    // 如果标志为 false，终止处理
                    return;
                }

                if (max != null && i > 1 && i % int.Parse(max) == 1)
                {
                    MessageBox.Show($"已处理{max}个是否继续?");
                }

                int waitTime = GetConfigIntValue("WaitTime", 600);
                AutomationElement id = Retry.RunAndTry(() => AutomationSearchHelper.FindFirstElementById(targetWindow, GetConfigValue("ID")),
                    () => Refresh(targetWindow), waitTime, 2000);

                while (id == null || !Regex.IsMatch(id.Current.Name, @"^-?\d+$"))
                {
                    Refresh(targetWindow);
                    Thread.Sleep(1000);
                    Logger.Info($"第{i}个 id找不到刷新重试");
                    id = Retry.RunAndTry(() => AutomationSearchHelper.FindFirstElementById(targetWindow, GetConfigValue("ID")),
                        () => Refresh(targetWindow), waitTime, 2000);
                    errorTime++;
                    if (errorTime > 10)
                    {
                        break;
                    }
                }

                if (id != null)
                {
                    Logger.Info($"第{i}个: {id.Current.Name}");
                    processed.Add(id.Current.Name);
                    i = processed.Count;

                    MouseSimulator.Move((int)buttonCenter.X, (int)buttonCenter.Y);

                    AutomationElement submit = FindElement(targetWindow, "确认");
                    if (submit != null)
                    {
                        StockInput.PressEnter();
                        Thread.Sleep(300);
                    }

                    MouseSimulator.MouseClick(true, (int)buttonCenter.X, (int)buttonCenter.Y);
                    Thread.Sleep(200);
                    StockInput.PressY();
                    Thread.Sleep(100);
                    StockInput.PressEnter();
                    Thread.Sleep(GetConfigIntValue("WaitMillSeconds"));
                    errorTime = 0;
                }

                if (processed.Count >= maxCount)
                {
                    Logger.Info($"已处理 {processed.Count} 个商品，达到最大处理数量 终止。");
                    break;
                }
            }
            catch (Exception ex)
            {
                Logger.Error($"第{i}个处理失败 重试【{errorTime}】: {ex.Message}");
                Refresh(targetWindow);
                if (errorTime <= 10)
                {
                    i--;
                    errorTime++;
                }
            }
        }
    }

    private AutomationElement Refresh(AutomationElement targetWindow)
    {
        StockInput.PressEnter();
        Thread.Sleep(100);

        AutomationElement refreshButton = FindElementById(targetWindow, GetConfigValue("RefreshBtn"));
        if (refreshButton == null)
        {
            Logger.Info("未找到刷新按钮。");
            return null;
        }

        Point buttonCenter = GetElementCenter(refreshButton);
        MouseSimulator.Move((int)buttonCenter.X, (int)buttonCenter.Y);
        MouseSimulator.MouseClick(true, (int)buttonCenter.X, (int)buttonCenter.Y);
        return null;
    }

    private AutomationElement FindElementById(AutomationElement root, string id)
    {
        return root.FindFirst(TreeScope.Descendants,
            new PropertyCondition(AutomationElement.AutomationIdProperty, id));
    }

    private Point GetElementCenter(AutomationElement element)
    {
        Rect rect = element.Current.BoundingRectangle;
        return new Point(rect.Left + rect.Width / 2, rect.Top + rect.Height / 2);
    }

    private int GetConfigIntValue(string key, int defaultValue = 0)
    {
        string value = Config.GetDefault(key, defaultValue.ToString());
        if (int.TryParse(value, out int result))
        {
            return result;
        }
        return defaultValue;
    }
}