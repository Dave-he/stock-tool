using stock_tool.common;
using stock_tool.utils;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Text.RegularExpressions;
using System.IO;
using System.Windows.Automation;

namespace stock_tool.service;

class SubmitService2
{
    // Windows API 函数声明
    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern bool SetForegroundWindow(IntPtr hWnd);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern int GetClassName(IntPtr hWnd, StringBuilder lpClassName, int nMaxCount);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern bool EnumChildWindows(IntPtr hWndParent, EnumWindowsProc lpEnumFunc, IntPtr lParam);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern bool SetCursorPos(int x, int y);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern void mouse_event(uint dwFlags, int dx, int dy, uint dwData, int dwExtraInfo);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, int dwExtraInfo);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr SetWindowsHookEx(int idHook, HookProc lpfn, IntPtr hMod, uint dwThreadId);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern bool UnhookWindowsHookEx(IntPtr hhk);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern IntPtr GetModuleHandle(string lpModuleName);

    private const int SW_MAXIMIZE = 3;
    private const uint MOUSEEVENTF_LEFTDOWN = 0x0002;
    private const uint MOUSEEVENTF_LEFTUP = 0x0004;
    private const uint KEYEVENTF_KEYUP = 0x0002;
    private const int WH_CALLWNDPROC = 4;
    private const int WM_CREATE = 0x0001;

    private delegate bool EnumWindowsProc(IntPtr hWnd, IntPtr lParam);
    private delegate IntPtr HookProc(int nCode, IntPtr wParam, IntPtr lParam);

    [StructLayout(LayoutKind.Sequential)]
    private struct RECT
    {
        public int Left;
        public int Top;
        public int Right;
        public int Bottom;
    }

    [StructLayout(LayoutKind.Sequential)]
    private struct CWPSTRUCT
    {
        public IntPtr lParam;
        public IntPtr wParam;
        public int message;
        public IntPtr hwnd;
    }

    private IntPtr hookHandle;
    private HookProc hookProc;

    private static volatile string currentId = string.Empty;

    public void SubmitClick(object sender, RoutedEventArgs e)
    {
        e.Handled = true;
        Logger.Info("开始处理所有....");

        try
        {
            // 设置钩子监听错误提示框
            hookProc = new HookProc(HookCallback);
            hookHandle = SetWindowsHookEx(WH_CALLWNDPROC, hookProc, GetModuleHandle(null), 0);
            if (hookHandle == IntPtr.Zero)
            {
                Logger.Error("设置钩子失败: " + Marshal.GetLastWin32Error());
            }

            // 获取配置项
            string targetWindowTitle = GetConfigValue("TargetWindowTitle");
            string targetElementTitle = GetConfigValue("TargetElementTitle");

            // 查找目标窗口
            IntPtr mainWindowHandle = FindWindow(null, targetWindowTitle);
            if (mainWindowHandle == IntPtr.Zero)
            {
                Logger.Info($"找不到【{targetWindowTitle}】，请运行程序");
                return;
            }

            ActivateAndMaximizeWindow(mainWindowHandle);

            // 将窗口句柄转换为 AutomationElement
            AutomationElement mainWindow = AutomationElement.FromHandle(mainWindowHandle);

            // 查找右边 pannel
            AutomationElement targetWindow = AutomationSearchHelper.FindByName(mainWindow, targetElementTitle);
            if (targetWindow == null)
            {
                Logger.Info($"找不到 【{targetElementTitle}】,请打开某商品");
                return;
            }

            // 删除临时文件
            string resultPath = GetConfigValue("ResultFilePath");
            string resultFile = resultPath + DateTimeOffset.UtcNow.ToString("yyyy-MM-dd HH-mm-ss") + ".txt";
            FileUtil.Delete(GetConfigValue("CompareFilePath"));

            int maxCount = GetMaxCount(mainWindow);

            // 异步处理任务
            Task.Run(() =>
            {
                try
                {
                    Submit(maxCount, targetWindow);
                }
                catch (Exception ex)
                {
                    Logger.Error($"终止处理: {ex.Message}");
                }
                finally
                {
                    // 移除钩子
                    if (hookHandle != IntPtr.Zero)
                    {
                        UnhookWindowsHookEx(hookHandle);
                    }
                }
            });
        }
        catch (Exception ex)
        {
            Logger.Error($"处理过程中出现错误: {ex.Message}");
        }
    }


    private IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
    {
        if (nCode >= 0)
        {
            CWPSTRUCT cwp = (CWPSTRUCT)Marshal.PtrToStructure(lParam, typeof(CWPSTRUCT));
            if (cwp.message == WM_CREATE)
            {
                try
                {
                    StringBuilder windowTitle = new StringBuilder(256);
                    GetWindowText(cwp.hwnd, windowTitle, windowTitle.Capacity);

                    StringBuilder windowClassName = new StringBuilder(256);
                    GetClassName(cwp.hwnd, windowClassName, windowClassName.Capacity);

                    // 这里可以添加更多判断条件，例如特定的类名等
                    if (IsErrorMessageBox(windowTitle.ToString(), windowClassName.ToString()))
                    {
                        string windowContent = GetWindowContent(cwp.hwnd);
                        Logger.Info($"{currentId} 检测到错误提示框 - 标题: {windowTitle}, 内容: {windowContent}");
                        keybd_event(0x0D, 0, 0, 0); // 模拟按下 Enter 键
                        Thread.Sleep(50);
                        keybd_event(0x0D, 0, KEYEVENTF_KEYUP, 0); // 模拟释放 Enter 键
                    }

                    if (windowTitle.ToString().Contains("确认")) {

                        keybd_event(0x0D, 0, 0, 0); // 模拟按下 Enter 键
                        Thread.Sleep(50);
                        keybd_event(0x0D, 0, KEYEVENTF_KEYUP, 0); // 模拟释放 Enter 键
                    }
                }
                catch (Exception ex)
                {
                    Logger.Error($"钩子处理消息时出错: {ex.Message}");
                }
            }
        }
        return CallNextHookEx(hookHandle, nCode, wParam, lParam);
    }

    private bool IsErrorMessageBox(string title, string className)
    {
        // 可以根据实际情况修改判断逻辑
        return title.Contains("错误") || title.Contains("异常") || className.Contains("Error");
    }

    private string GetWindowContent(IntPtr hWnd)
    {
        AutomationElement windowElement = AutomationElement.FromHandle(hWnd);
        AutomationElement textElement = windowElement.FindFirst(TreeScope.Children, new PropertyCondition(AutomationElement.LocalizedControlTypeProperty, "文本"));
        if (textElement != null)
        {
            return textElement.Current.Name;
        }
        return string.Empty;
    }



    private string GetConfigValue(string key)
    {
        string value = Config.Get(key);
        if (string.IsNullOrEmpty(value))
        {
            throw new ArgumentException($"配置项 {key} 为空或未找到");
        }
        return value;
    }

    private void ActivateAndMaximizeWindow(IntPtr hWnd)
    {
        SetForegroundWindow(hWnd);
        ShowWindow(hWnd, SW_MAXIMIZE);
        Logger.Info("窗口已最大化。");
    }

    private int GetMaxCount(AutomationElement mainWindow)
    {
        AutomationElement total = AutomationSearchHelper.FindFirstElementById(mainWindow, "lblTotal");
        if (total != null)
        {
            string totalText = total.Current.Name;
            Match match = Regex.Match(totalText, @"\d+");
            if (match.Success)
            {
                return int.Parse(match.Value);
            }
        }
        return 0;
    }

    private void Submit(int maxCount, AutomationElement targetWindow)
    {
        int errorTime = 1;
        HashSet<string> processed = new HashSet<string>();

        AutomationElement targetButton = AutomationSearchHelper.FindFirstElementById(targetWindow, GetConfigValue("SubmitBtn"));
        if (targetButton == null)
        {
            Logger.Info("未找到提交按钮。");
            return;
        }

        Point buttonCenter = GetElementCenter(targetButton);
        string max = GetConfigValue("maxNum");

        for (int i = 1; i <= maxCount; i++)
        {
            try
            {
                if (!MainWindow.IsProcess())
                {
                    // 如果标志为 false，终止处理
                    return;
                }

                if (max != null && i > 1 && i % int.Parse(max) == 1)
                {
                    MessageBox.Show($"已处理{max}个是否继续?");
                }

                int waitTime = GetConfigIntValue("WaitTime", 600);
                AutomationElement id = Retry.RunAndTry(() => AutomationSearchHelper.FindFirstElementById(targetWindow, GetConfigValue("ID")),
                    () => Refresh(targetWindow), waitTime, 2000);

                while (id == null || !Regex.IsMatch(id.Current.Name, @"^-?\d+$"))
                {
                    Refresh(targetWindow);
                    Thread.Sleep(1000);
                    Logger.Info($"第{i}个 id找不到刷新重试");
                    id = Retry.RunAndTry(() => AutomationSearchHelper.FindFirstElementById(targetWindow, GetConfigValue("ID")),
                        () => Refresh(targetWindow), waitTime, 2000);
                    errorTime++;
                    if (errorTime > 10)
                    {
                        break;
                    }
                }

                if (id != null)
                {
                    currentId = id.Current.Name;
                    Logger.Info($"第{i}个: {currentId}");
                    processed.Add(id.Current.Name);
                    i = processed.Count;

                    SetCursorPos((int)buttonCenter.X, (int)buttonCenter.Y);
                    mouse_event(MOUSEEVENTF_LEFTDOWN, (int)buttonCenter.X, (int)buttonCenter.Y, 0, 0);
                    mouse_event(MOUSEEVENTF_LEFTUP, (int)buttonCenter.X, (int)buttonCenter.Y, 0, 0);

                    //AutomationElement submit = AutomationSearchHelper.FindByName(targetWindow, "确认");
                    //if (submit != null)
                    //{
                    //    keybd_event(0x0D, 0, 0, 0); // 模拟按下 Enter 键
                    //    Thread.Sleep(300);
                    //    keybd_event(0x0D, 0, KEYEVENTF_KEYUP, 0); // 模拟释放 Enter 键
                    //}

                    //SetCursorPos((int)buttonCenter.X, (int)buttonCenter.Y);
                    //mouse_event(MOUSEEVENTF_LEFTDOWN, (int)buttonCenter.X, (int)buttonCenter.Y, 0, 0);
                    //mouse_event(MOUSEEVENTF_LEFTUP, (int)buttonCenter.X, (int)buttonCenter.Y, 0, 0);


                    //keybd_event(0x59, 0, 0, 0); // 模拟按下 Y 键
                    //Thread.Sleep(100);
                    //keybd_event(0x59, 0, KEYEVENTF_KEYUP, 0); // 模拟释放 Y 键

                    //keybd_event(0x0D, 0, 0, 0); // 模拟按下 Enter 键
                    //Thread.Sleep(GetConfigIntValue("WaitMillSeconds"));
                    //keybd_event(0x0D, 0, KEYEVENTF_KEYUP, 0); // 模拟释放 Enter 键

                    Thread.Sleep(GetConfigIntValue("WaitMillSeconds"));
                    errorTime = 0;
                }

                if (processed.Count >= maxCount)
                {
                    Logger.Info($"已处理 {processed.Count} 个商品，达到最大处理数量 终止。");
                    break;
                }
            }
            catch (Exception ex)
            {
                Logger.Error($"第{i}个处理失败 重试【{errorTime}】: {ex.Message}");
                Refresh(targetWindow);
                if (errorTime <= 10)
                {
                    i--;
                    errorTime++;
                }
            }
        }
    }

    private AutomationElement Refresh(AutomationElement targetWindow)
    {
        keybd_event(0x0D, 0, 0, 0); // 模拟按下 Enter 键
        Thread.Sleep(100);
        keybd_event(0x0D, 0, KEYEVENTF_KEYUP, 0); // 模拟释放 Enter 键

        AutomationElement refreshButton = AutomationSearchHelper.FindFirstElementById(targetWindow, GetConfigValue("RefreshBtn"));
        if (refreshButton == null)
        {
            Logger.Info("未找到刷新按钮。");
            return null;
        }

        Point buttonCenter = GetElementCenter(refreshButton);
        SetCursorPos((int)buttonCenter.X, (int)buttonCenter.Y);
        mouse_event(MOUSEEVENTF_LEFTDOWN, (int)buttonCenter.X, (int)buttonCenter.Y, 0, 0);
        mouse_event(MOUSEEVENTF_LEFTUP, (int)buttonCenter.X, (int)buttonCenter.Y, 0, 0);
        return null;
    }

    private Point GetElementCenter(AutomationElement element)
    {
        System.Windows.Rect rect = element.Current.BoundingRectangle;
        return new Point(rect.Left + rect.Width / 2, rect.Top + rect.Height / 2);
    }

    private int GetConfigIntValue(string key, int defaultValue = 0)
    {
        string value = Config.GetDefault(key, defaultValue.ToString());
        if (int.TryParse(value, out int result))
        {
            return result;
        }
        return defaultValue;
    }

    private bool IsValidId(AutomationElement element)
    {
        return Regex.IsMatch(element.Current.Name, @"^-?\d+$");
    }
}