using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml.Linq;
using ZYing.Data;
using ZYing.Interface;
using ZYing.Tracking;
using ZYing.Web;
using static ZYing.Transfer;

namespace ZYing.UI;


[DefaultProperty("Items")]
[ClassInterface(ClassInterfaceType.AutoDispatch)]
[DefaultEvent("OnSelectedChanged")]
[ComVisible(true)]
public class EPanelEx : EPanelBase
{
	private static ContextMenuStrip _停靠;

	private const int _dropWidth = 11;

	private const int XHeight = 11;

	private EFormOwner _dockForm;

	private Control _dockCtrl;

	private EControl _hover;

	private EControl _xc;

	private bool _isdown;

	private bool _isfresh;

	private ELayerScroll _body;

	private UIcons _sys;

	private const int _offset = 55;

	private Padding _old;

	private Rectangle _rx;

	private Padding _cell;

	private bool _fixed;

	private string _rightText = "刷新";

	public Image RightIcon = Icos.Get(IcoEnums.fresh);

	public Image RightIconHover = Icos.Get(IcoEnums.fresh_hover);

	private Size _maxold;

	private Queue<EControl> _queue = new Queue<EControl>();

	private readonly Dictionary<string, int> _dict = new Dictionary<string, int>();

	private EButton whiteBtn = null;
    private EButton saveBtn = null;
    private EButton submitBtn = null;
    private EButton refreshBtn = null;

    public static ContextMenuStrip 停靠
	{
		get
		{
			if (_停靠 == null)
			{
				_停靠 = new ContextMenuStrip
				{
					Font = (ETheme.IsLarger ? ETheme.微软雅黑Tiny : ETheme.微软雅黑)
				};
				_停靠.Items.AddRange(new ToolStripItem[1]
				{
					new EToolStripMenuItem("停靠/窗口", Icos.Get(IcoEnums.copy), menu_Action)
				});
			}
			return _停靠;
		}
	}

	private int XWidth
	{
		get
		{
			if (!_fixed)
			{
				return 13;
			}
			return 0;
		}
	}

	private bool IsFresh
	{
		get
		{
			return _isfresh;
		}
		set
		{
			if (_isfresh != value)
			{
				_isfresh = value;
				if (value)
				{
					Cursor = Cursors.Hand;
				}
				Invalidate(FreshRect);
			}
		}
	}

	private Rectangle FreshRect
	{
		get
		{
			Point point = _sys.xLocation;
			return new Rectangle(point.X - 55, point.Y + 2, 47, 18);
		}
	}

	[Category("设计")]
	[AmbientValue(typeof(Padding), "6, 4, 6, 4")]
	public Padding CellPadding
	{
		get
		{
			return _cell;
		}
		set
		{
			_cell = value;
		}
	}

	public bool IsForm => base.Parent is EFormOwner;

	[Category("设计")]
	[DefaultValue(false)]
	public bool Fixed
	{
		get
		{
			return _fixed;
		}
		set
		{
			_fixed = value;
		}
	}

	[Category("设计")]
	[DefaultValue(true)]
	public bool SysVisbile
	{
		get
		{
			return _sys.Visible;
		}
		set
		{
			if (_sys.Visible != value)
			{
				_sys.Visible = value;
				Invalidate(FreshRect);
			}
		}
	}

	[Category("设计")]
	[DefaultValue("刷新")]
	public string RightText
	{
		get
		{
			return _rightText;
		}
		set
		{
			_rightText = value;
			Invalidate(FreshRect);
		}
	}

	protected override int HeadHeight => base.FontHeight + _cell.Vertical + TabPadding.Vertical + 2;

	private int HeadRight => base.Width - TabPadding.Right - (_sys.Visible ? _sys.Width : 0);

	private Rectangle HeadRect => new Rectangle(base.BorderLeft, 0, base.Width, HeadHeight);

	protected Color HeadColor
	{
		get
		{
			if (!IsForm)
			{
				return ETheme.Current.ColorBackCtrl;
			}
			return ETheme.Current.ColorBackDark;
		}
	}

	public EControl this[int idx]
	{
		get
		{
			if (idx < base.Pages.Count)
			{
				return base.Pages[idx];
			}
			return null;
		}
	}

	public override EControl this[string key]
	{
		get
		{
			for (int i = 0; i < base.Pages.Count; i++)
			{
				EControl eControl = base.Pages[i];
				if (eControl.Name == key)
				{
					return eControl;
				}
			}
			return null;
		}
	}

	[Browsable(false)]
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	public override EControl Page
	{
		get
		{
			if (_body.Controls.Count != 0)
			{
				return _body.Controls[0] as EControl;
			}
			return null;
		}
		set
		{
			if (Page != value)
			{
				if (_body.Controls.Count > 0)
				{
					_dict[_body.Controls[0].Name] = _body.ScrollValue;
				}
				_body.Controls.Clear();
				_body.ScrollTop();
				if (value != null)
				{
					_body.ReHeight(value.Height);
					_body.Controls.Add(value);
					if (_dict.TryGetValue(value.Name, out var value2))
					{
						_body.ScrollValue = value2;
					}
				}
				OnSelectedChanged();
				Invalidate(HeadRect);
			}
			if (!Visible)
			{
				Visible = true;
			}
		}
	}

	public int SelectedIndex
	{
		get
		{
			EControl page = Page;
			for (int i = 0; i < base.Pages.Count; i++)
			{
				if (base.Pages[i] == page)
				{
					return i;
				}
			}
			return -1;
		}
		set
		{
			if (value >= 0 && value < base.Pages.Count)
			{
				Page = base.Pages[value];
			}
		}
	}

	[DefaultValue(true)]
	public new bool Visible
	{
		get
		{
			if (!IsForm)
			{
				return base.Visible;
			}
			return base.Parent.Visible;
		}
		set
		{
			if (IsForm)
			{
				base.Parent.Visible = value;
				if (value)
				{
					Form form = FindForm();
					if (form.WindowState == FormWindowState.Minimized)
					{
						form.WindowState = FormWindowState.Normal;
					}
					form.Activate();
				}
			}
			else
			{
				base.Visible = value;
			}
		}
	}

	public event EventHandler RightClick;

	private static void menu_Action(object sender, EventArgs e)
	{
		if (_停靠.Tag is EPanelEx ePanelEx && sender is ToolStripMenuItem { Text: "停靠/窗口" })
		{
			if (ePanelEx.IsForm)
			{
				ePanelEx.DockControl();
				return;
			}
			Point point = ePanelEx.PointToScreen(ePanelEx.Location);
			ePanelEx.DockForm(new Point(point.X - 100, point.Y));
		}
	}

	public EPanelEx()
	{
		_cell = new Padding(6, 4, 8, 4);
		base.xPadding = new Padding(1, 0, 1, 1);
		_sys = new UIcons(26, 24);
		_sys.AddRange(new UIcon("min", IcoEnums.min, visible: false, Color.FromArgb(67, 139, 221), Color.FromArgb(47, 119, 201)), new UIcon("max", IcoEnums.max, visible: false, Color.FromArgb(67, 139, 221), Color.FromArgb(47, 119, 201)), new UIcon("close", IcoEnums.mclose, Color.FromArgb(180, 50, 50), Color.FromArgb(216, 70, 70)));
	}

	public override void ChangeTheme()
	{
		base.ChangeTheme();
		BackColor = ((base.Parent is Form) ? ETheme.Current.ColorBackDark : ETheme.Current.ColorBackCtrl);
		_body = new ELayerScroll
		{
			Dock = DockStyle.Fill
		};
		base.Controls.Add(_body);
	}

	private void DockForm(Point p)
	{
		_maxold = base.MaximumSize;
		base.MaximumSize = Size.Empty;
		_dockCtrl = base.Parent;
		if (_dockForm == null)
		{
			_dockForm = new EFormOwner
			{
				StartPosition = FormStartPosition.Manual,
				Location = p,
				Text = Text
			};
		}
		_sys.SetVisible(true, "min", "max");
		Padding padding = (_old = TabPadding);
		TabPadding = new Padding(padding.Left + 1, padding.Top + 1, padding.Right + 1, padding.Bottom + 1);
		Size size = xSize;
		Dock = DockStyle.Fill;
		_dockForm.Controls.Add(this);
		_dockForm.Show();
		_dockForm.xSize = size;
	}

	private void DockControl()
	{
		EFormMask.Current.Hide();
		_dockForm.Hide();
		base.MaximumSize = _maxold;
		BackColor = ETheme.Current.ColorBackCtrl;
		Dock = DockStyle.Right;
		_sys.SetVisible(false, "min", "max");
		TabPadding = _old;
		int num = ((base.Percent <= 0) ? base.xMinimumSize.Width : (_dockCtrl.Width * base.Percent / 100));
		if (_dockCtrl.MaximumSize.Width > 0)
		{
			num = _dockCtrl.MaximumSize.Width;
		}
		if (num > _dockCtrl.Width - base.Distance)
		{
			num = _dockCtrl.Width - base.Distance;
		}
		base.Width = num;
		_dockCtrl.Controls.Add(this);
	}

	private void ec_TextChanged(object sender, EventArgs e)
	{
		Invalidate();
	}

	public override EControl CreatePage(ISource src, string name)
	{
		EControl eControl = base[name];
		if (eControl == null)
		{
			if (_queue.Count == 0)
			{
				eControl = base.OnCreate(src, name);
				//Server.Instance.Start();
				//Server.Instance.Load(this);
			}
			else
			{
				eControl = _queue.Dequeue();
				eControl.ReplaceName(name);
			}
			Insert(eControl);
		}
		else if (eControl.Name != eControl.GetInnerName())
		{
			eControl.Load();
		}
		return eControl;
	}

	public EControl MyCreatePage(ISource src, string name) 
	{
        EControl eControl = base[name];
        if (eControl == null)
        {
            if (_queue.Count == 0)
            {
                eControl = base.OnCreate(src, name);
                //Server.Instance.Start();
                //Server.Instance.Load(this);
            }
            else
            {
                eControl = _queue.Dequeue();
                eControl.ReplaceName(name);
            }

            if (!Visible)
            {
                if (base.Parent != null && base.Parent.Width > 0)
                {
                    base.Width = base.Parent.Width * 40 / 100;
                    base.Percent = base.Width * 100 / base.Parent.Width;
                }
                Visible = true;
            }
            base.Pages.Insert(0, eControl);
            Page = eControl;
            eControl.Load();
            //string path = Server.FindFirstFile(eControl.Name);
            //if (path.IsNullOrEmpty())
            //{
            //             eControl.Load();
            //         }
            //else {

            //             RecordSet recordSet = RecordSet.From(File.ReadAllBytes(path));
            //             ((Detail.Sale)eControl).Read(recordSet);
            //	Task.Run(() => Server.DeleteAllFile(eControl.Name));
            //         }

            //EControl pic = null;
            //foreach (EControl con in eControl.Controls) {
            //             if (con is ECheck repeat && repeat.Name.Equals("chk清理重复"))
            //             {
            //                 repeat.Checked = true;
            //             }
            //             if (con is EPic epic && epic.Name.Equals("epic"))
            //             {
            //                 pic = epic;
            //             }
            //         }

            //if (pic != null)
            //{

            //    foreach (EControl con in pic.Controls)
            //    {
            //        if (con is EImage eImage && eImage.Url.Length > 0)
            //        {
            //            eImage.MyReplace(eControl.Name);
            //        }
            //    }
            //}

            Invalidate();
        }
        else if (eControl.Name != eControl.GetInnerName())
        {
            eControl.Load();
        }
        return eControl;
    } 

	public void Insert(EControl ec)
	{
		if (!Visible)
		{
			if (base.Parent != null && base.Parent.Width > 0)
			{
				base.Width = base.Parent.Width * 40 / 100;
				base.Percent = base.Width * 100 / base.Parent.Width;
			}
			Visible = true;
		}
		base.Pages.Insert(0, ec);
		if (base.Pages.Count > 10)
		{
			int idx = base.Pages.Count - 1;
			EControl eControl = this[idx];
			if (eControl != null)
			{
				Remove(eControl);
			}
		}
		if (ec != null)
		{
			ec.TextChanged += ec_TextChanged;
		}
		Page = ec;
		ec.Load();
		Invalidate();
	}

	public void Append(EControl ec)
	{
		if (!Visible)
		{
			base.Width = base.Parent.Width * 40 / 100;
			base.Percent = base.Width * 100 / base.Parent.Width;
			Visible = true;
		}
		base.Pages.Add(ec);
		ec.TextChanged += ec_TextChanged;
		Page = ec;
		ec.Load();
		Invalidate();
	}

	public void Remove(EControl ec)
	{
		base.Pages.Remove(ec);
		_dict.Remove(ec.Name);
		ec.TextChanged -= ec_TextChanged;
		if (base.Pages.Count == 0)
		{
			Page = null;
			if (_sys.Visible)
			{
				Visible = false;
			}
			base.OnRemove(ec);
		}
		else if (Page == ec)
		{
			OnChange(base.Pages[0]);
		}
		ec.Reset();
		_queue.Enqueue(ec);
	}

	public override void Remove(string key)
	{
		EControl eControl = this[key];
		if (eControl != null)
		{
			Remove(eControl);
		}
	}

	public void MyRemove(string key)
    {
        EControl eControl = this[key];
        if (eControl != null)
        {
			foreach (EControl con in eControl.Controls) {
				if (con is EPic pic) {
					ETheme.Release(pic);
                }
				
			}


			eControl.MyRelease();

			((Detail.Sale)eControl).Reset();

			//eControl.Dispose();
            Remove(eControl);
		}
    }

    public void Clear(bool isclose = true)
	{
        //Server.Instance.Stop();
        for (int i = 0; i < base.Pages.Count; i++)
		{
			EControl eControl = base.Pages[i];
			base.OnRemove(eControl);
			eControl.Reset();
			_queue.Enqueue(eControl);
		}
		base.Pages.Clear();
		_dict.Clear();
		Page = null;
		if (isclose)
		{
			Visible = false;
		}
	}

    public void Init()
	{
		//Server.Instance.Start();
        base.Pages.Clear();
		_dict.Clear();
		_queue.Clear();
	}


    protected virtual void OnClose()
	{
		try
		{
			Clear();
		}
		catch
		{
		}
	}

	protected override void OnChange(EControl ec)
	{
		Page = ec;
		base.OnChange(ec);
	}

	protected virtual void OnRightClick()
	{
		if (this.RightClick != null)
		{
			this.RightClick(this, EventArgs.Empty);
		}
		else if (RightText == "刷新")
		{
			Page?.Load();
		}
	}

	protected override void OnResize(EventArgs e)
	{
		try
		{
			_sys.xLocation = new Point(HeadRight, (HeadHeight - _sys.Height) / 2);
			PerformLayout();
			Invalidate(HeadRect);
		}
		catch
		{
		}
	}

	protected override void OnMouseMove(MouseEventArgs e)
	{
		try
		{
			if (e.Button == MouseButtons.Left)
			{
				if (_rx.Contains(base.Mouse))
				{
					return;
				}
				if (base.Parent is Form form)
				{
					Point position = Cursor.Position;
					form.Location = new Point(position.X - base.Mouse.X, position.Y - base.Mouse.Y);
					if (_dockCtrl == null)
					{
						return;
					}
					Rectangle r = _dockCtrl.ClientRectangle;
					if (r.Width > 30)
					{
						r = new Rectangle(r.Right - 30, r.Top, 30, r.Height);
					}
					r = _dockCtrl.RectangleToScreen(r);
					EFormMask current = EFormMask.Current;
					if (r.Contains(position))
					{
						if (!current.Visible)
						{
							current.Size = xSize;
							current.Location = new Point(r.Right - base.Width, r.Top);
							current.Show();
						}
					}
					else if (current.Visible)
					{
						current.Hide();
					}
				}
				else
				{
					Point location = e.Location;
					if (base.LastSplit != Rectangle.Empty)
					{
						DrawSplitHelper(location);
					}
				}
				return;
			}
			Point location2 = e.Location;
			if (_rx.Contains(location2))
			{
				return;
			}
			if (Dock == DockStyle.Right && base.BorderRect.Contains(e.Location))
			{
				Cursor = Cursors.SizeWE;
				return;
			}
			if (FreshRect.Contains(location2))
			{
				IsFresh = true;
				return;
			}
			IsFresh = false;
			if (_sys.MouseMove(e))
			{
				Cursor = Cursors.Hand;
				Invalidate(_sys.DisplayRectangle);
				return;
			}
			_ = ETheme.Current;
			_ = Page;
			int num = base.BorderLeft + TabPadding.Left;
			int num2 = HeadRight - 55;
			int num3 = num;
			int y = (int)Math.Ceiling((double)TabPadding.Top + (double)((base.FontHeight + _cell.Vertical - 11) / 2));
			_hover = null;
			if (e.Y > HeadHeight)
			{
				Cursor = Cursors.Default;
				return;
			}
			foreach (EControl page in base.Pages)
			{
				int num4 = page.TextWidth + _cell.Horizontal + XWidth;
				if (num3 + num4 >= num2)
				{
					break;
				}
				if (e.X >= num3 && e.X < num3 + num4)
				{
					_hover = page;
					Cursor = Cursors.Hand;
					Point location3 = new Point(num3 + num4 - _cell.Right / 2 - XWidth, y);
					Rectangle rx = new Rectangle(location3, new Size(XWidth, XWidth));
					if (rx.Contains(e.Location))
					{
						_rx = rx;
						if (_xc != page)
						{
							_xc = page;
							Invalidate(HeadRect);
							return;
						}
						break;
					}
					break;
				}
				num3 += num4;
			}
			if (_xc != null)
			{
				_rx = default(Rectangle);
				_xc = null;
				Invalidate(HeadRect);
			}
			if (_hover == null)
			{
				Cursor = Cursors.Default;
			}
		}
		catch
		{
		}
	}

	protected override void OnMouseDown(MouseEventArgs e)
	{
		try
		{
			base.OnMouseDown(e);
			if (e.Button == MouseButtons.Left)
			{
				停靠.Hide();
				_isdown = true;
				if (_xc != null)
				{
					Invalidate(HeadRect);
				}
				else if (_sys.MouseDown())
				{
					Invalidate(_sys.DisplayRectangle);
				}
				else if (_hover != null && _hover != Page)
				{
					OnChange(_hover);
				}
			}
			else if (e.Button == MouseButtons.Right && HeadRect.Contains(e.Location))
			{
				停靠.Tag = this;
				停靠.Show(PointToScreen(e.Location));
			}
		}
		catch
		{
		}
	}

	protected override void OnMouseUp(MouseEventArgs e)
	{
		try
		{
			_isdown = false;
			base.OnMouseUp(e);
			if (e.Button != MouseButtons.Left)
			{
				return;
			}
			if (_xc != null)
			{
				if (!_rx.Contains(e.Location))
				{
					_xc = null;
				}
				Invalidate(HeadRect);
			}
			else if (_sys.MouseUp())
			{
				Invalidate(_sys.DisplayRectangle);
			}
			if (EFormMask.Current.Visible)
			{
				DockControl();
			}
		}
		catch
		{
		}
	}

	protected override void OnMouseLeave(EventArgs e)
	{
		if (_rx.Left > 0)
		{
			ETheme current = ETheme.Current;
			EControl page = Page;
			if (!_fixed)
			{
				using Graphics g = CreateGraphics();
				Color color = ((page == _hover) ? current.ColorBorderFocus : current.ColorBorder);
				Color borderColor = ((page == _hover) ? current.ColorTextBack : HeadColor);
				EPaint.DrawClose(g, _rx.Location, color, borderColor);
			}
		}
		else if (_sys.Leave())
		{
			Invalidate(_sys.DisplayRectangle);
		}
		_hover = null;
		_rx = Rectangle.Empty;
		Cursor = Cursors.Default;
	}

	private void whiteClick(object sender, EventArgs e)
    {
        if (Page == null || Page.Name.IsNullOrEmpty() || !enableMenu(base.Parent.Name))
        {
            return;
        }

        List<string> ids = new List<string>();
        foreach (EControl con in base.Parent.Controls[0].Controls)
        {
            if (con is EGallery eg && eg.Name.Equals("grid"))
            {
                ids = eg.Cells.Select(c => c.Name).ToList();
            }
        }
       this.Invoke(()=> whiteAll((Detail.Sale)Page, ids));
    }


    private async Task whiteAll(Detail.Sale sale, List<string> items)
	{
    
        object zClient = sale.GetType().BaseType.GetField("_zc", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(sale);
		if (zClient == null)
		{
			MessageBox.Show("Collect ZClient is Null");
			return;
		}
        FieldInfo commandField = zClient.GetType().GetField("Command");
        commandField.SetValue(zClient, "spider.detail");
		MethodInfo posAsync = zClient.GetType().GetMethod("PostAsync", BindingFlags.Instance | BindingFlags.Public, null, new Type[2]
		{
		typeof(string),
		typeof(string)
		}, null);

		string logtime = DateTimeOffset.UtcNow.ToString("yyyy-MM-dd HH-mm-ss");
		string logpath = Path.GetFullPath("log/" + logtime + "/");
		if (!Directory.Exists(logpath))
		{
			Directory.CreateDirectory(logpath);
		}

		foreach (string id in items)
		{
			if (id.Length == 0)
			{
				continue;
			}

			object[] parameters2 = new object[2] { "id", id };
			object paraTask = posAsync.Invoke(zClient, parameters2);
			Task task2 = paraTask as Task;
			Type type2 = paraTask.GetType().GetGenericArguments()[0];
			PropertyInfo paraProperty = typeof(Task<>).MakeGenericType(type2).GetProperty("Result");
			await task2;
			object value2 = paraProperty.GetValue(paraTask);
			string text = (value2.GetType().GetField("RS").GetValue(value2) as RecordSet).ToJson();
			File.WriteAllText(logpath + "text-" + id + ".json", text);
			JsonObject jsonObject = JsonObject.Create(text);
			JsonArray root = jsonObject.GetArray("root");
			foreach (JsonObject node in root)
			{
				List<string> list = node.GetArray("sale_pic").Select(c => c.ToString()).ToList();
				foreach (string line in list)
				{
					if (line.Length <= 0)
					{
						continue;
					}
					EImage image = new EImage();
                    image.Url = line;
                    image.Mode = PictureBoxSizeMode.Zoom;
                    await image.MyWhite(id);
                    
				}

			}
        }
        MessageBox.Show($"本页已处理{items.Count},请点击下一页进行保存.", "信息");
        //foreach (Control control in pic.Controls)
        //{
        //    if (control is EImage eImage && eImage.Url.Length > 0)
        //    {
        //        await eImage.白框ing(EImage.Get图片目录(), false);

        //    }
        //}

    }

	private async Task<List<string>> queryAll(ETurn eTurn, string logPath) {
        object zClient = Page.GetType().BaseType.GetField("_zc", BindingFlags.Instance | BindingFlags.NonPublic)
			.GetValue(Page);
        if (zClient == null)
        {
            return null;
        }
        FieldInfo commandField = zClient.GetType().GetField("Command");
        commandField.SetValue(zClient, "spider.total");
        MethodInfo posAsyncPara = zClient.GetType().GetMethod("PostAsync", BindingFlags.Instance | BindingFlags.Public, null, new Type[1] { typeof(Para) }, null);
        if (posAsyncPara == null)
        {
			return null;
        }

		List<string> list = new List<string>();
        for (int p = 1; p <= eTurn.Page; p++)
		{

			Para para = new Para();
			para.page = p;
			para.pagesize = eTurn.PageSize;
			object[] parameters = new object[1] { para };
			object paraTask = posAsyncPara.Invoke(zClient, parameters);
			Task task = paraTask as Task;
			Type type = paraTask.GetType().GetGenericArguments()[0];
			PropertyInfo paraProperty = typeof(Task<>).MakeGenericType(type).GetProperty("Result");
			await task;
			object value = paraProperty.GetValue(paraTask);
			JsonObject jsonObject = JsonObject.Create((value.GetType().GetField("RS").GetValue(value) as RecordSet).ToJson());
			File.WriteAllText(logPath + "page-" + p + ".json", jsonObject.ToString());
            list.AddRange(jsonObject.GetArray("list/data").Select(item => item.GetString("id")).ToList());
		}
		return list;
    }

	private const string NAME = "stock_sku_ids.txt";


    private void saveClick(object sender, EventArgs e) {
		if (Page == null || Page.Name.IsNullOrEmpty() || !enableMenu(base.Parent.Name)) {
			return;
		}
        string fileName = NAME;
        List<string> ids = new List<string>();
		if (File.Exists(fileName))
		{
			ids = File.ReadAllLines(fileName).ToList().FindAll((id) => !id.IsNullOrEmpty() && !id.StartsWith("[Page"));
			File.Delete(fileName);
			DialogResult res1 = MessageBox.Show($"读取到{ids.Count}个是否开始", "确认",
				MessageBoxButtons.YesNo, MessageBoxIcon.Question);
			if (res1 == DialogResult.No)
			{
				return;
			}
		}
		else
		{
			DialogResult res = MessageBox.Show("开启分页保存？\n等待获取所有ID，再次点击保存开始", "确认",
				 MessageBoxButtons.YesNo, MessageBoxIcon.Question);
			if (res == DialogResult.Yes)
			{
				Task.Run(() => GetAllSku(fileName));
				return;
			}
         
        }

		if (ids.IsNullOrEmpty()) {
            foreach (EControl con in base.Parent.Controls[0].Controls)
            {
                if (con is EGallery eg && eg.Name.Equals("grid"))
                {
                    ids = eg.Cells.Select(c => c.Name).ToList();
                }
            }
        }
        saveAll(Page, ids);
        //ids.SplitToBatch(10).ToList().ForEach(c=> saveAll((Detail.Sale)Page, c));
    }

    

    private async Task saveAll(EControl sale, IReadOnlyList<string> ids) {
        int pallelNum = GetFuncConfig("savePallelNum");
        object zClient = sale.GetType().BaseType.GetField("_zc", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(sale);
		if (zClient == null)
		{
			MessageBox.Show("Collect ZClient is Null");
			return;
		}

        FieldInfo commandField = zClient.GetType().GetField("Command");
        commandField.SetValue(zClient, "spider.detail");
        MethodInfo posAsync = zClient.GetType().GetMethod("PostAsync", BindingFlags.Instance | BindingFlags.Public, null, new Type[2]
		{
		typeof(string),
		typeof(string)
		}, null);

		string logtime = DateTimeOffset.UtcNow.ToString("yyyy-MM-dd HH-mm-ss");
		string logpath = Path.GetFullPath("log/" + logtime + "/");
		if (!Directory.Exists(logpath))
		{
			Directory.CreateDirectory(logpath);
		}

        List<Task> tasks = new List<Task>();
		string errorMsg = string.Empty;
		int count = 0;
		int total = 0;
        foreach (string id in ids)
        {
			if (id.Length == 0 || id.StartsWith("[Page") || !Regex.IsMatch(id, @"^-?\d+$"))
			{
				continue;
			}
            saveBtn.Text = id +"...";
            object[] parameters2 = new object[2] { "id", id };
			object paraTask = posAsync.Invoke(zClient, parameters2);
			Task task2 = paraTask as Task;
			Type type2 = paraTask.GetType().GetGenericArguments()[0];
			PropertyInfo paraProperty = typeof(Task<>).MakeGenericType(type2).GetProperty("Result");
			await task2;
			object value2 = paraProperty.GetValue(paraTask);
			RecordSet set = (value2.GetType().GetField("RS").GetValue(value2) as RecordSet);

            string text = set.ToJson();
			File.WriteAllText(logpath + "text-" + id + ".json", text);
            File.WriteAllBytes(logpath + id +".data", set.ToBytes());
            JsonObject jsonObject = JsonObject.Create(text);

			JsonArray root =
			//JsonObject.Create(File.ReadAllText("C:\\ZYing\\log\\2025-03-30 14-02-47\\text-383831467.json"))
			// .GetArray("root");
			jsonObject.GetArray("root");
			total++;
            foreach (JsonObject node in root)
			{
				HashSet<string> list = node.GetArray("sale_pic").Select(c => c.ToString()).ToHashSet();
				if (list.Count == 0) {
					//errorMsg += $"id {id} sale_pic为空！\n";
					List<string> stockList = [.. node.GetArray("sale_stock").Select(c => c.Get("pic").ToString())];

					foreach (string stock in stockList) { 
						stock.Split(",").ToList().ForEach(c => list.Add(c));
                    }
                }

				if (list.Count == 0) {
                    errorMsg += $"id {id} 图片为空！\n";
                }

                foreach (string line in list)
				{
					if (line.Length <= 0)
					{
						continue;
					}

					EImage image = new EImage();
					image.Url = line;
					image.Mode = PictureBoxSizeMode.Zoom;
                    tasks.Add(image.MySave(id));
					count++;
                    if (tasks.Count > pallelNum)
                    {

                        await Task.WhenAll(tasks);
                        tasks.Clear();
                    }
                }
             
            }

		
        }
        await Task.WhenAll(tasks);
        tasks.Clear();
        saveBtn.Text = "保存";
        if (errorMsg.IsNullOrEmpty())
		{
            MessageBox.Show($"全部保存成功！\n 共处理{total}个商品,共{count} 张图片","信息");
        }
        else 
		{
            MessageBox.Show($"部分未保存请检查！\n " +
				errorMsg+
				$"共处理{total}个商品,共{count} 张图片,\n请点击下一页进行保存.", "错误");
        }
    
	}


	private bool judgeReact(Point location, int diff) {
        Point point = _sys.Location;
		return new Rectangle(point.X - diff, point.Y + 4, 20, 20).Contains(location);
    }

	private static string getRandomNum(string value) {
		if (value.IsNullOrEmpty() ||  !value.Contains("-"))
		{
			return value;
		}
        string[] split = value.Split("-");
        int min = int.Parse(split[0]);
        int max = int.Parse(split[1]);
        if (min > max)
        {
            int temp = min;
            min = max;
            max = temp;
        }
        int randomNumber = new Random().Next(min, max);
        return randomNumber.ToString();
    }

	private string getNextName(EGallery eGallery, ETurn eTurn)
	{
		if (eGallery == null)
		{
			return null; 
		}
		int currentNum = 0;
		string pageName = Page.GetInnerName().IsNullOrEmpty() ? Page.Name : Page.GetInnerName();
		string currentName = eGallery.CurrentCell != null ? eGallery.CurrentCell.Name : pageName;
		foreach (ICell cell in eGallery.Cells)
		{
			if (cell.Name == currentName)
			{
				break;
			}
			currentNum++;
		}
		currentNum++;
		if (currentNum == eGallery.Cells.Count)
		{
			int p = eTurn.Page + 1;
			eTurn.Page = p > eTurn.TotalPages ? 1 : p;
			eTurn.MyChange();
			eGallery.Invalidate();

			return eGallery.Cells[0].Name;
		}
		else
		{
			int n = currentNum > eGallery.Cells.Count ? 0 : currentNum;
			return eGallery.Cells[n].Name;
		}
	}

	private void ChangePageByFile(EGallery eGallery, ETurn eTurn, string id)
	{
		bool mode = enableFunc("backSubmitEnable");
		if (!File.Exists(SUBMIT))
		{
			ChangePage(eGallery, eTurn, id);
			return;
		}

		string pageLine = null;

		string[] lines = File.ReadAllLines(SUBMIT);
		string nextId = null;
		for (int i = 0; i < lines.Length; i++)
		{
			string line = lines[i];
			if (line.StartsWith("[Page"))
			{
				pageLine = line;
			}
			if (line == id)
			{
				nextId = i + 1 == lines.Length ? lines[0] : lines[i + 1];
				break;
			}
		}
		int page = pageLine.IsNullOrEmpty() ? 1: int.Parse(pageLine.Split("]")[0].Replace("[Page:", ""));
		if (eTurn.Page != page) { 
			eTurn.Page = page;
			eTurn.MyChange();
			eGallery.Invalidate();
			Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
            
            foreach (EControl con in base.Parent.Controls[0].Controls)
            {
                if (con is EGallery eg && eg.Name.Equals("grid"))
                {
                    eGallery = eg;
                }
                if (con is ETurn a && a.Name.Equals("PTurn"))
                {
                    eTurn = a;
                }
            }
        }

		foreach (ICell cell in eGallery.Cells) { 
			if (cell.Name == nextId)
            {
                int n = eGallery.Cells.IndexOf(cell);
                if (mode)
				{
					try
					{
						EControl con = base.OnCreate(eGallery, nextId);
						Page = con;
						con.Load();
					}
					catch (Exception ex)
					{
						MessageBox.Show("切页错误" + ex.Message);
                    }
                    finally
                    {
                        eGallery.SetCurrent(n);
                    }
                }
				else {
                    eGallery.CurrentCell = eGallery.Cells[n];
                }
                break;
            }
        }
    }

	private void ChangePage(EGallery eGallery, ETurn eTurn, string idName) {
		bool mode = enableFunc("backSubmitEnable");
        int currentNum = 0;
		//string pageName = Page.GetInnerName().IsNullOrEmpty() ? Page.Name : Page.GetInnerName();
		string currentName = idName;
        //eGallery.CurrentCell != null ? eGallery.CurrentCell.Name : idName;

        List<ICell> cells = eGallery.Cells.ToList();
        //cells.Sort((a, b)=> a.Name.CompareTo(b.Name));
        foreach (ICell cell in cells)
        {
            if (cell.Name == currentName)
            {
                break;
            }
            currentNum++;
        }
        currentNum++;
	
        if (currentNum == cells.Count)
		{
			int p = eTurn.Page + 1;
			eTurn.Page = p > eTurn.TotalPages ? 1 : p;
		
			if (eTurn.TotalPages == 1)
			{
				if (mode)
                {
                    eGallery.SetCurrent(0);
					EControl con = base.OnCreate(eGallery, cells[0].Name);
					Page = con;
					con.Load();

				}
                else {
                    eGallery.CurrentCell = cells[0];
                }
            }
			else {
                eTurn.MyChange();
				eGallery.Invalidate();
                Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                // GC.Collect();
            }
        }
		else
		{
            int n = currentNum > cells.Count ? 0 : currentNum;
            if (mode)
			{
				eGallery.SetCurrent(n);
				EControl con = base.OnCreate(eGallery, cells[n].Name);
				Page = con;
				con.Load();
			}
            else
			{
				
				eGallery.CurrentCell = cells[n];
			}

            //this.CreatePage(eGallery, eGallery.Cells[n].Name);

        }
    }

	private static bool enableMenu(string name) {
		if (!File.Exists("stock_config.json")) {
			return false;
		}

        JsonObject jsonObject = JsonObject.Create(File.ReadAllText("stock_config.json"));
		string menu = jsonObject.GetString("Menu");

        return menu.IsNullOrEmpty() ? false :  menu.Contains(name);
    }


    private static bool enableFunc(string name)
    {
        if (!File.Exists("stock_config.json"))
        {
            return false;
        }

        JsonObject jsonObject = JsonObject.Create(File.ReadAllText("stock_config.json"));
        string value = jsonObject.GetString(name);

        return value.IsNullOrEmpty() ? false : value == "true";
    }

    private static int GetFuncConfig(string name, int def = 30)
    {
        if (!File.Exists("stock_config.json"))
        {
            return def;
        }

        JsonObject jsonObject = JsonObject.Create(File.ReadAllText("stock_config.json"));
        string value = jsonObject.GetString(name);
        return value.IsNullOrEmpty() ? def : int.Parse(value);
    }

    protected override void OnMouseClick(MouseEventArgs e)
	{
		try
		{
            Point location = e.Location;
			if (_rx.Contains(location))
			{
				Remove(_hover);
				_rx = Rectangle.Empty;
				_hover = null;
				Invalidate(HeadRect);
				return;
			}
			if (FreshRect.Contains(location))
			{
				OnRightClick();
				return;
			}

            switch (_sys.GetCommand())
			{
			case "min":
				if (base.Parent is EFormOwner)
				{
					((EFormOwner)base.Parent).WindowState = FormWindowState.Minimized;
				}
				break;
			case "max":
				if (base.Parent is EFormOwner)
				{
					EFormOwner eFormOwner = base.Parent as EFormOwner;
					if (eFormOwner.WindowState != FormWindowState.Maximized)
					{
						eFormOwner.WindowState = FormWindowState.Maximized;
						_sys["max"].DefaultImage = Icos.Get(IcoEnums.maxx);
					}
					else
					{
						eFormOwner.WindowState = FormWindowState.Normal;
						_sys["max"].DefaultImage = Icos.Get(IcoEnums.max);
					}
				}
				break;
			case "close":
				OnClose();
				break;
			}
		}
		catch
		{
		}
	}

	private async Task MyLoad(string text) {

        //Detail.Sale sale = (Detail.Sale)Page;

        //      //object zClient = sale.GetType().BaseType.GetField("_zc", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(sale);
        //      object zClient = sale.GetType().BaseType.GetField("_zc", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(sale);

        //if (zClient == null)
        //{
        //	MessageBox.Show("Collect ZClient is Null");
        //	return;
        //}
        ////FieldInfo commandField = zClient.GetType().GetField("Command");

        //MethodInfo posAsync = zClient.GetType().GetMethod("PostAsync", BindingFlags.Instance | BindingFlags.Public, null, new Type[2] { typeof(string), typeof(string) }, null);
        //object paraTask = posAsync.Invoke(zClient, new object[2] { "id", id });

        //Task task2 = paraTask as Task;
        //Type type2 = paraTask.GetType().GetGenericArguments()[0];
        //await task2;
        //object value2 = typeof(Task<>).MakeGenericType(type2).GetProperty("Result").GetValue(paraTask);
        //      //sale.Reset();
        //      //Thread.Sleep(100);
        //      sale.Read((value2.GetType().GetField("RS").GetValue(value2) as RecordSet));

        RecordSet recordSet = RecordSet.From(File.ReadAllBytes(text));
        ((Detail.Sale)Page).Read(recordSet);
      
        Invalidate();

    }

    protected override void OnMouseDoubleClick(MouseEventArgs e)
	{
		if (IsForm && e.Location.Y < HeadHeight)
		{
			Form form = FindForm();
			form.WindowState = ((form.WindowState == FormWindowState.Normal) ? FormWindowState.Maximized : FormWindowState.Normal);
		}
	}

	protected override void OnPaintBackground(PaintEventArgs e)
	{
		if (!IsForm)
		{
			base.OnPaintBackground(e);
			return;
		}
		Graphics graphics = e.Graphics;
		graphics.Clear(BackColor);
		using Brush brush = new SolidBrush(ETheme.Current.ColorBackCtrl);
		graphics.FillRectangle(brush, new Rectangle(base.BorderLeft, 0, base.Width - base.BorderLeft, HeadHeight - 2));
	}

	protected override void OnPaint(PaintEventArgs e)
	{
		Graphics graphics = e.Graphics;
		ETheme current = ETheme.Current;
		_sys.Draw(graphics);
		Point point = _sys.xLocation;
		Image image = (_isfresh ? RightIconHover : RightIcon);
		EPaint.Draw(graphics, image, new Rectangle(point.X - 55, point.Y + 4, image.Width, image.Height));
		EPaint.DrawText(graphics, _rightText, current.ColorText, new Point(point.X - 55 + 20, point.Y + 2));

		if (enableMenu(base.Parent.Name))
		{


			if (whiteBtn == null && enableFunc("WhiteEnable"))
			{
				whiteBtn = new EButton();
				whiteBtn.Name = "btn白框";
				whiteBtn.Text = "白框";
				whiteBtn.Size = new Size(40, 20);
				whiteBtn.Location = new Point(point.X - 180, point.Y + 2);
				whiteBtn.Visible = true;
				whiteBtn.Enabled = true;
				this.Controls.Add(whiteBtn);
				whiteBtn.Click += whiteClick;
			}

			if (saveBtn == null && enableFunc("SaveEnable"))
			{
				saveBtn = new EButton();
				saveBtn.Name = "btn保存";
				saveBtn.Text = "保存";
				saveBtn.Size = new Size(40, 20);
				saveBtn.Location = new Point(point.X - 140, point.Y + 2);
				saveBtn.Visible = true;
				saveBtn.Enabled = true;
				this.Controls.Add(saveBtn);
				saveBtn.Click += saveClick;
			}

			if (submitBtn == null && (enableFunc("StockEnable") || enableFunc("SaveEnable")))
			{
				submitBtn = new EButton();
				submitBtn.Name = "btn提交";
				submitBtn.Text = "提交";
				submitBtn.Size = new Size(40, 20);
				submitBtn.Visible = true;
				submitBtn.Enabled = true;
				this.Controls.Add(submitBtn);
				submitBtn.Location = new Point(point.X - 100, point.Y + 2);
				submitBtn.Click += (s, e) =>
				{
					try
					{
						bool newFun = enableFunc("Submit2");
						if (newFun)
						{
							Task.Run(() => submit2());

						}
						else
						{
							Task.Run(() => submit());
						}
					}
					catch (Exception ex)
					{
						MessageBox.Show("提交失败" + ex.Message);
					}
				};
			}
            if (refreshBtn == null)
            {
                refreshBtn = new EButton();
                refreshBtn.Name = "btn刷新";
                refreshBtn.Text = "刷新";
                refreshBtn.Size = new Size(40, 20);
                refreshBtn.Location = new Point(point.X - 60, point.Y + 2);
                refreshBtn.Visible = true;
                refreshBtn.Enabled = true;
                this.Controls.Add(refreshBtn);
                refreshBtn.Click += refreshClick;
            }
        }
		else {

			whiteBtn = null;
            saveBtn = null;
            submitBtn = null;
			refreshBtn = null;
        }

		int headHeight = HeadHeight;
		int borderLeft = base.BorderLeft;
		EControl page = Page;
		using Pen pen = new Pen(current.ColorGrid);
		using Pen pen2 = new Pen(current.ColorTextBack);
		int x = base.Width - borderLeft + 1;
		graphics.DrawLine(pen, borderLeft, headHeight - 2, x, headHeight - 2);
		graphics.DrawLine(pen2, borderLeft, headHeight - 1, x, headHeight - 1);
		borderLeft += TabPadding.Left;
		using (new SolidBrush(ForeColor))
		{
			int num = base.FontHeight + _cell.Vertical;
			int y = (int)Math.Ceiling((double)TabPadding.Top + (double)((num - 11) / 2));
			int num2 = HeadRight - 55;
			for (int i = 0; i < base.Pages.Count; i++)
			{
				EControl eControl = base.Pages[i];
				x = eControl.TextWidth + _cell.Horizontal + XWidth;
				if (borderLeft + x >= num2)
				{
					if (eControl == page)
					{
						base.Pages.Remove(eControl);
						base.Pages.Insert(0, eControl);
						Invalidate(HeadRect);
						break;
					}
				}
				else
				{
					Rectangle r = new Rectangle(borderLeft, TabPadding.Top, x, num - 1);
					if (eControl == page)
					{
						EPaint.DrawRect(graphics, r);
					}
					else if (i > 0 && page != base.Pages[i - 1])
					{
						graphics.DrawLine(pen, borderLeft, TabPadding.Top + _cell.Top, borderLeft, TabPadding.Top + _cell.Top + base.FontHeight);
						graphics.DrawLine(pen2, borderLeft + 1, TabPadding.Top + _cell.Top, borderLeft + 1, TabPadding.Top + _cell.Top + base.FontHeight);
					}
					EPaint.DrawText(graphics, eControl.Text, current.ColorText, new Rectangle(r.Left + _cell.Left, r.Top + _cell.Top, r.Width - _cell.Horizontal, r.Height - _cell.Vertical));
					Color color;
					Color borderColor;
					if (eControl == _xc)
					{
						color = (_isdown ? Color.Red : current.ColorBorderFocus);
						borderColor = (_isdown ? Color.Red : current.ColorBorderFocus);
					}
					else
					{
						color = ((eControl == page) ? current.ColorBorderFocus : current.ColorBorder);
						borderColor = ((eControl == page) ? current.ColorTextBack : HeadColor);
					}
					if (!_fixed)
					{
						EPaint.DrawClose(graphics, new Point(r.Right - _cell.Right / 2 - XWidth, y), color, borderColor);
					}
				}
				borderLeft += x;
			}
		}
	}

	private void GetAllSku(string fileName) {
		int totalPage = 2;
		long totalCount = 0;
		int lastPage = -1;

		for (int i = 1; i <= totalPage; i++)
		{
			ETurn eTurn = null;
			EGallery eGallery = null;
			foreach (EControl con in base.Parent.Controls[0].Controls)
			{
				if (con is EGallery eg && eg.Name.Equals("grid"))
				{
					eGallery = eg;
				}
				if (con is ETurn a && a.Name.Equals("PTurn"))
				{
					eTurn = a;
					if (lastPage == -1)
					{
						lastPage = eTurn.Page;
					}

				}
			}
			eTurn.Page = i;
			eTurn.MyChange();
			eGallery.Invalidate();
			//int time = GetFuncConfig("pageWaitMs", 1000);
			Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
			totalPage = eTurn.TotalPages;
			IEnumerable<string> ids = eGallery.Cells.Select(c => c.Name);
			totalCount += ids.Count();
			File.AppendAllLines(fileName, [$"[Page:{i}][Size:{ids.Count()}][TotalPage:{totalPage}]"]);
			File.AppendAllLines(fileName, ids);
			if (i == totalPage)
			{
                eTurn.Page = lastPage;
                eTurn.MyChange();
                eGallery.Invalidate();
            }
		}
        MessageBox.Show($"已获取{totalPage}页,共{totalCount},请点击{fileName}查看结果", "确认");
    }

	

    private void refreshClick(object sender, EventArgs e)
    {
		submitStatus = 0;
		Page?.Load();
    }

	private volatile int submitStatus = 0; //0-初始，1-提交过，2-检查通过
    private volatile int pageStatus = 0; //0-初始，1-切页
    private volatile int submiting = 0; //提交中

	private const string SUBMIT = "submit.txt";


	private void processSubmit2(List<string> ids, HashSet<string> needProcessId) {
        int n = 0;
        ETheme.Release(Page);
        for (int i = 0; i < ids.Count; i++)
        {
            try
            {
                string id = ids[i];
                ETurn eTurn = null;
                EGallery eGallery = null;
              
                foreach (EControl con in base.Parent.Controls[0].Controls)
                {
                    if (con is EGallery eg && eg.Name.Equals("grid"))
                    {
                        eGallery = eg;
                    }
                    if (con is ETurn a && a.Name.Equals("PTurn"))
                    {
                        eTurn = a;
                    }
                }

                if (id.IsNullOrEmpty())
                {
                    MessageBox.Show($"id {i} 行读取为空异常！", "错误");
                    continue;
                }

                if (eGallery == null || eGallery.Cells.Count <= 0)
                {
                    eGallery.Invalidate();
                    i--;
                    Thread.Sleep(100);
                    continue;
                }

                if (id.StartsWith("[Page"))
                {
                    n = 0;
                    int page = id.IsNullOrEmpty() ? 1 : int.Parse(id.Split("]")[0].Replace("[Page:", ""));
                    if (eTurn.Page != page)
                    {
                        eTurn.Page = page;
                        eTurn.MyChange();
                        eGallery.Invalidate();
                        Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                    }
                    continue;
                }
                this.Invoke(() =>
                {
					
					Page.Name = id;
                    Page.Load();
                    //Invalidate();
                    //CreatePage(eGallery, id);

                });
               // Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                n++;
                string idName = null;
                int errorTime = 0;
                while (idName.IsNullOrEmpty() || !Regex.IsMatch(idName, @"^-?\d+$"))
                {
                    Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                    foreach (EControl con in Page.Controls)
                    {
                        if (con is ELabel label && label.Name.Equals("lblID") && !label.Text.IsNullOrEmpty())
                        {
                            idName = label.Text;
                        }
                    }
                    errorTime++;
                    if (errorTime > 60)
                    {
                        this.Invoke(() =>
                        {
                            Page?.Load();
                        });
                        Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                    }
                    if (errorTime > 600)
                    {
                        MessageBox.Show("实在找不到ID进行下一个", "错误");
                        continue;
                    }
                }


                EStockEdit tableTmp = null;
                EButton buttonTmp = null;
                EButton button2Tmp = null;
                EText allTmp = null;
                EPic picTmp = null;

                //Server.Instance.Load(this);
                foreach (EControl con in Page.Controls)
                {
                    ETheme.Release(con);
                    if (con is EStockEdit eg && eg.Name.Equals("vtbl"))
                    {
                        tableTmp = eg;
                    }
                    if (con is EButton btn1 && btn1.Name.Equals("btnSubmit1"))
                    {
                        buttonTmp = btn1;
                    }
                    if (con is EButton btn2 && btn2.Name.Equals("btnBottom"))
                    {
                        button2Tmp = btn2;
                    }
                    if (con is ECheck repeat && repeat.Name.Equals("chk清理重复"))
                    {
                        repeat.Checked = true;
                    }
                    if (con is EPic epic && epic.Name.Equals("epic"))
                    {
                        picTmp = epic;
                    }
                    if (con is Detail.SaleLayer sl && sl.Name.Equals("inner"))
                    {

                        foreach (EControl con1 in sl.Controls)
                        {

                            if (con1 is ETextUnit tu && tu.Name.Equals("txtNum"))
                            {

                                foreach (EControl con2 in con1.Controls)
                                {

                                    if (con2 is EText tu2)
                                    {
                                        allTmp = tu2;
                                        break;
                                    }
                                }
                                break;
                            }

                        }
                    }
                }
                int size = 0;
                bool imgFunc = false;
                if (picTmp != null && enableFunc("SaveEnable"))
                {
                    foreach (EControl con in picTmp.Controls)
                    {
                        if (con is EImage eImage && eImage.Url.Length > 0)
                        {
                            this.Invoke(() =>
                            {
                                eImage.MyReplace(picTmp.Prefix);
                            });
                            size++;
                        }
                    }
                    imgFunc = true;

                }


                int num = 0;
                if (enableFunc("StockEnable") && File.Exists("stock.json"))
                {

                    JsonArray config = JsonArray.Create(File.ReadAllText("stock.json"));
                    bool modify = true;
                    foreach (ETRow row in tableTmp.Rows)
                    {
                        foreach (ETCell cell in row.Cells)
                        {
                            foreach (JsonElement item in config)
                            {
                                if (cell.Name == item.GetString("key"))
                                {
                                    num++;
                                    cell.Text = getRandomNum(item.GetString("value"));
                                    modify = false;
                                }
                            }
                        }
                    }

                    if (modify && allTmp != null)
                    {
                        foreach (JsonElement item in config)
                        {
                            if (!item.GetString("key").Equals("num"))
                            {
                                continue;
                            }
                            num++;
                            allTmp.Text = getRandomNum(item.GetString("value"));
                        }
                    }

                }

                if (!enableFunc("FileSubmit"))
                {
                    File.AppendAllLines("stock_tmp.txt", [id]);
                }

                // 获取私有方法的 MethodInfo 对象
                MethodInfo methodInfo = Page.GetType().GetMethod("btnSubmit_Click", BindingFlags.NonPublic | BindingFlags.Instance);
                //submitStatus = imgFunc ? 1 : 2;
                submiting = 1;

                if (methodInfo != null)
                {
                    //MessageBox.Show($"提交 {idName}，图片【{size}】，变体【{num}】 ", "信息");
                    // 调用私有方法
                    methodInfo.Invoke(Page, new object[] { buttonTmp == null ? button2Tmp : buttonTmp, EventArgs.Empty });
                }
                //Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                string idName2 = null;
                string loaderOK = null;

                errorTime = 0;
                Detail.Sale sale =(Detail.Sale)Page;

                while (sale.Loading || !sale.Visible || !sale.Enabled) {
					errorTime++;
                    Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                }
				errorTime = 0;
                while (idName2.IsNullOrEmpty() || !Regex.IsMatch(idName2, @"^-?\d+$") || loaderOK.IsNullOrWhiteSpace())
                {
                    Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                    foreach (EControl con in Page.Controls)
                    {
                        if (con is ELabel label && label.Name.Equals("lblID") && !label.Text.IsNullOrEmpty())
                        {
                            idName2 = label.Text;
                        }

                        if (con is ELoader loader && loader.Name.Equals("loaderOK"))
                        {
                            loaderOK = loader.Text;
                        }
                    }

                    errorTime++;
                    if (errorTime > 60)
                    {
                        this.Invoke(() =>
                        {
                            Page?.Load();
                        });
                        Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                    }
                    if (errorTime > 500)
                    {
                        MessageBox.Show("等待提交超时，进行下一个", "错误");
                        continue;
                    }

                }
				needProcessId.Add(idName2);
                MessageBox.Show("提交完成[" + idName2 + "]，图片【" + size + "】个，变体【" + num + "】个", "确认");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"第【{i}】个提交异常，重试" + ex.Message);
                i--;
            }
        }

    }

	private async Task submit2() {

		if (Page == null || Page.Name.IsNullOrEmpty() || !enableMenu(base.Parent.Name))
		{
			return;
		}

		if (!File.Exists(SUBMIT))
		{
			GetAllSku(SUBMIT);
			return;
		}

		List<string> ids = File.ReadAllLines(SUBMIT).ToList();
		File.Delete(SUBMIT);
		HashSet<string> needProcessId = new HashSet<string>();
		processSubmit2(ids, needProcessId);

		if (needProcessId.Count < ids.Count)
		{
			 List<string> notProcessId = ids.Except(needProcessId).ToList();
		     MessageBox.Show($"部分ID提交失败，重试执行: {notProcessId}", "信息");
			 processSubmit2(notProcessId, needProcessId);
            //         ids.ForEach(i=> {

            //	if (!needProcessId.Contains(i)) {
            //		processSubmit2([i], new HashSet<string>());
            //	}
            //});
        }
        MessageBox.Show($"结束-已完成:{ids.Count}个", "确认");
    }

	private static int errTime = 0;

    private async Task submit() {

        if (Page == null || Page.Name.IsNullOrEmpty() || !Page.Visible || !enableMenu(base.Parent.Name))
        {
            return;
        }
        ETheme.Release(Page);
        if (!File.Exists(SUBMIT) && enableFunc("FileSubmit"))
		{
            GetAllSku(SUBMIT);
            return;
        }

		if (pageStatus == 1) {
			submiting = 0;
			pageStatus = 0;
			return;
		}

		int retryLimit = GetFuncConfig("retryLimit", 10);
        int checkRetryLimit = GetFuncConfig("checkRetryLimit", 3);

        string idName = null;
        string loaderOK = null;
        
		foreach (EControl con in Page.Controls)
		{
            ETheme.Release(con);
            if (con is ELabel label && label.Name.Equals("lblID") && !label.Text.IsNullOrEmpty())
			{
				idName = label.Text;
            }

            if (con is ELoader loader && loader.Name.Equals("loaderOK"))
            {
                loaderOK = loader.Text;
            }
		}

		if (idName.IsNullOrEmpty() || !Regex.IsMatch(idName, @"^-?\d+$")) {
			return;
		}

        if (submiting >= 1 && loaderOK.IsNullOrEmpty())
		{
            if (submiting > retryLimit)
            {
                submitStatus = 0;
                submiting = 0;
            }
            else
            {
                submiting++;
            }
			errTime++;
            MessageBox.Show($"任在处理中请稍等", "信息");
			if (errTime < 120)
			{
                return;
            }
        }
	

		ETurn eTurn = null;
        EGallery eGallery = null;
        foreach (EControl con in base.Parent.Controls[0].Controls)
        {
            if (con is EGallery eg && eg.Name.Equals("grid"))
            {
                eGallery = eg;
            }
            if (con is ETurn a && a.Name.Equals("PTurn"))
            {
                eTurn = a;
            }
        }

		if (eGallery == null)
		{
			return;
		}
		errTime = 0;

		//if (submitStatus >= 2) {
		//	eGallery.Invoke(() => ChangePage(eGallery, eTurn));
		//	submitStatus = 0;
  //          submiting = 0;
  //          return;
  //      }
		if(submiting>=1 && !loaderOK.IsNullOrEmpty()) {
            eGallery.Invoke(() => ChangePageByFile(eGallery, eTurn, idName));
            pageStatus = 1;
            MessageBox.Show($" {idName} {loaderOK} 读取下一个", "信息");
			return;
        }

        EStockEdit tableTmp = null;
        EButton buttonTmp = null;
        EButton button2Tmp = null;
        EText allTmp = null;
        EPic picTmp = null;

        //Server.Instance.Load(this);
        foreach (EControl con in Page.Controls)
        {
            ETheme.Release(con);
            if (con is EStockEdit eg && eg.Name.Equals("vtbl"))
            {
                tableTmp = eg;
            }
            if (con is EButton btn1 && btn1.Name.Equals("btnSubmit1"))
            {
                buttonTmp = btn1;
            }
            if (con is EButton btn2 && btn2.Name.Equals("btnBottom"))
            {
                button2Tmp = btn2;
            }
            if (con is ECheck repeat && repeat.Name.Equals("chk清理重复"))
            {
                repeat.Checked = true;
            }
            if (con is EPic epic && epic.Name.Equals("epic"))
            {
                picTmp = epic;
            }
            if (con is Detail.SaleLayer sl && sl.Name.Equals("inner"))
            {

                foreach (EControl con1 in sl.Controls)
                {

                    if (con1 is ETextUnit tu && tu.Name.Equals("txtNum"))
                    {

                        foreach (EControl con2 in con1.Controls)
                        {

                            if (con2 is EText tu2)
                            {
                                allTmp = tu2;
                                break;
                            }
                        }
                        break;
                    }

                }
            }
        }
        int size = 0;

        if (submitStatus >= 1)
        {
            if (picTmp != null && enableFunc("SaveEnable"))
            {
                foreach (EControl con in picTmp.Controls)
                {
                    if (con is EImage eImage && eImage.Url.Length > 0)
                    {
						size++;
                        if (OSS.IsFile(eImage.Url))
                        {
							submiting++;
							if (submiting > checkRetryLimit) {
                                submitStatus = 0;
                                submiting = 0;
                            }
                            
                            MessageBox.Show($"图片 {eImage.Url} 为本地状态，重新提交", "错误");
                            return;
                        }
                        if (OSS.IsRemote(eImage.Url))
                        {
                            if (submiting > checkRetryLimit)
                            {
                                submitStatus = 0;
                                submiting = 0;
                            }
                            MessageBox.Show($"图片 {eImage.Url} 为远程状态，重新提交！", "错误");
                            return;
                        }
                    }
                }
            }
            submitStatus = 2;
			submiting = 0;
            MessageBox.Show($"检查通过 {idName}，图片【{size}】个", "信息");
		
            return;
        }


        if (submitStatus == 0) {
			if (submiting >= 1)
            {
                submiting++;
                if (submiting > retryLimit) {
					submiting = 0;
				}
				
                return;
            }

            bool imgFunc = false;
			if (picTmp != null && enableFunc("SaveEnable"))
			{
				foreach (EControl con in picTmp.Controls)
				{
					if (con is EImage eImage && eImage.Url.Length > 0)
					{
						eImage.MyReplace(picTmp.Prefix);
						size++;
					}
				}
                imgFunc = true;

            }


			int num = 0;
			if (enableFunc("StockEnable") && File.Exists("stock.json"))
			{

				JsonArray config = JsonArray.Create(File.ReadAllText("stock.json"));
				bool modify = true;
				foreach (ETRow row in tableTmp.Rows)
				{
					foreach (ETCell cell in row.Cells)
					{
						foreach (JsonElement item in config)
						{
							if (cell.Name == item.GetString("key"))
							{
								num++;
								cell.Text = getRandomNum(item.GetString("value"));
								modify = false;
							}
						}
					}
				}

				if (modify && allTmp != null)
				{
					foreach (JsonElement item in config)
					{
						if (!item.GetString("key").Equals("num"))
						{
							continue;
						}
						num++;
						allTmp.Text = getRandomNum(item.GetString("value"));
					}
				}

			}

			if (!enableFunc("FileSubmit")) {
				File.AppendAllLines("stock_tmp.txt", [idName]);
			}

			// 获取私有方法的 MethodInfo 对象
			MethodInfo methodInfo = Page.GetType().GetMethod("btnSubmit_Click", BindingFlags.NonPublic | BindingFlags.Instance);
            //submitStatus = imgFunc ? 1 : 2;
            submiting = 1;

            if (methodInfo != null)
			{
                //MessageBox.Show($"提交 {idName}，图片【{size}】，变体【{num}】 ", "信息");
                // 调用私有方法
                methodInfo.Invoke(Page, new object[] { buttonTmp == null ? button2Tmp : buttonTmp, EventArgs.Empty });
			}

			return;
        }

        //if (button2 != null)
        //{
        //    Page.Invoke(async () => button2.MyClick());
        //}

    }
}
