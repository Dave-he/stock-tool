using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using ZYing.Data;
using ZYing.Interface;
using ZYing.Tracking;
using ZYing.Web;
using static Enumer.ZScout;

namespace ZYing.UI;

[DefaultProperty("Items")]
[ClassInterface(ClassInterfaceType.AutoDispatch)]
[DefaultEvent("OnSelectedChanged")]
[ComVisible(true)]
public class EPanelEx : EPanelBase
{
	private static ContextMenuStrip _停靠;

	private const int _dropWidth = 11;

	private const int XHeight = 11;

	private EFormOwner _dockForm;

	private Control _dockCtrl;

	private EControl _hover;

	private EControl _xc;

	private bool _isdown;

	private bool _isfresh;

	private ELayerScroll _body;

	private UIcons _sys;

	private const int _offset = 55;

	private Padding _old;

	private Rectangle _rx;

	private Padding _cell;

	private bool _fixed;

	private string _rightText = "刷新";

	public Image RightIcon = Icos.Get(IcoEnums.fresh);

	public Image RightIconHover = Icos.Get(IcoEnums.fresh_hover);

	private Size _maxold;

	private Queue<EControl> _queue = new Queue<EControl>();

	private readonly Dictionary<string, int> _dict = new Dictionary<string, int>();

    private EButton whiteBtn = null;
    private EButton saveBtn = null;
    private EButton submitBtn = null;
    private EButton refreshBtn = null;
    public static ContextMenuStrip 停靠
	{
		get
		{
			if (_停靠 == null)
			{
				_停靠 = new ContextMenuStrip
				{
					Font = (ETheme.IsLarger ? ETheme.微软雅黑Tiny : ETheme.微软雅黑)
				};
				_停靠.Items.AddRange(new ToolStripItem[1]
				{
					new EToolStripMenuItem("停靠/窗口", Icos.Get(IcoEnums.copy), menu_Action)
				});
			}
			return _停靠;
		}
	}

	private int XWidth
	{
		get
		{
			if (!_fixed)
			{
				return 13;
			}
			return 0;
		}
	}

	private bool IsFresh
	{
		get
		{
			return _isfresh;
		}
		set
		{
			if (_isfresh != value)
			{
				_isfresh = value;
				if (value)
				{
					Cursor = Cursors.Hand;
				}
				Invalidate(FreshRect);
			}
		}
	}

	private Rectangle FreshRect
	{
		get
		{
			Point point = _sys.xLocation;
			return new Rectangle(point.X - 55, point.Y + 2, 47, 18);
		}
	}

	[Category("设计")]
	[AmbientValue(typeof(Padding), "6, 4, 6, 4")]
	public Padding CellPadding
	{
		get
		{
			return _cell;
		}
		set
		{
			_cell = value;
		}
	}

	public bool IsForm => base.Parent is EFormOwner;

	[Category("设计")]
	[DefaultValue(false)]
	public bool Fixed
	{
		get
		{
			return _fixed;
		}
		set
		{
			_fixed = value;
		}
	}

	[Category("设计")]
	[DefaultValue(true)]
	public bool SysVisbile
	{
		get
		{
			return _sys.Visible;
		}
		set
		{
			if (_sys.Visible != value)
			{
				_sys.Visible = value;
				Invalidate(FreshRect);
			}
		}
	}

	[Category("设计")]
	[DefaultValue("刷新")]
	public string RightText
	{
		get
		{
			return _rightText;
		}
		set
		{
			_rightText = value;
			Invalidate(FreshRect);
		}
	}

	protected override int HeadHeight => base.FontHeight + _cell.Vertical + TabPadding.Vertical + 2;

	private int HeadRight => base.Width - TabPadding.Right - (_sys.Visible ? _sys.Width : 0);

	private Rectangle HeadRect => new Rectangle(base.BorderLeft, 0, base.Width, HeadHeight);

	protected Color HeadColor
	{
		get
		{
			if (!IsForm)
			{
				return ETheme.Current.ColorBackCtrl;
			}
			return ETheme.Current.ColorBackDark;
		}
	}

	public EControl this[int idx]
	{
		get
		{
			if (idx < base.Pages.Count)
			{
				return base.Pages[idx];
			}
			return null;
		}
	}

	public override EControl this[string key]
	{
		get
		{
			for (int i = 0; i < base.Pages.Count; i++)
			{
				EControl eControl = base.Pages[i];
				if (eControl.Name == key)
				{
					return eControl;
				}
			}
			return null;
		}
	}

	[Browsable(false)]
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	public override EControl Page
	{
		get
		{
			if (_body.Controls.Count != 0)
			{
				return _body.Controls[0] as EControl;
			}
			return null;
		}
		set
		{
			if (Page != value)
			{
				if (_body.Controls.Count > 0)
				{
					_dict[_body.Controls[0].Name] = _body.ScrollValue;
				}
				_body.Controls.Clear();
				_body.ScrollTop();
				if (value != null)
				{
					_body.ReHeight(value.Height);
					_body.Controls.Add(value);
					if (_dict.TryGetValue(value.Name, out var value2))
					{
						_body.ScrollValue = value2;
					}
				}
				OnSelectedChanged();
				Invalidate(HeadRect);
			}
			if (!Visible)
			{
				Visible = true;
			}
		}
	}

	public int SelectedIndex
	{
		get
		{
			EControl page = Page;
			for (int i = 0; i < base.Pages.Count; i++)
			{
				if (base.Pages[i] == page)
				{
					return i;
				}
			}
			return -1;
		}
		set
		{
			if (value >= 0 && value < base.Pages.Count)
			{
				Page = base.Pages[value];
			}
		}
	}

	[DefaultValue(true)]
	public new bool Visible
	{
		get
		{
			if (!IsForm)
			{
				return base.Visible;
			}
			return base.Parent.Visible;
		}
		set
		{
			if (IsForm)
			{
				base.Parent.Visible = value;
				if (value)
				{
					Form form = FindForm();
					if (form.WindowState == FormWindowState.Minimized)
					{
						form.WindowState = FormWindowState.Normal;
					}
					form.Activate();
				}
			}
			else
			{
				base.Visible = value;
			}
		}
	}

	public event EventHandler RightClick;

	private static void menu_Action(object sender, EventArgs e)
	{
		if (_停靠.Tag is EPanelEx ePanelEx && sender is ToolStripMenuItem { Text: "停靠/窗口" })
		{
			if (ePanelEx.IsForm)
			{
				ePanelEx.DockControl();
				return;
			}
			Point point = ePanelEx.PointToScreen(ePanelEx.Location);
			ePanelEx.DockForm(new Point(point.X - 100, point.Y));
		}
	}

	public EPanelEx()
	{
		_cell = new Padding(6, 4, 8, 4);
		base.xPadding = new Padding(1, 0, 1, 1);
		_sys = new UIcons(26, 24);
		_sys.AddRange(new UIcon("min", IcoEnums.min, visible: false, Color.FromArgb(67, 139, 221), Color.FromArgb(47, 119, 201)), new UIcon("max", IcoEnums.max, visible: false, Color.FromArgb(67, 139, 221), Color.FromArgb(47, 119, 201)), new UIcon("close", IcoEnums.mclose, Color.FromArgb(180, 50, 50), Color.FromArgb(216, 70, 70)));
	}

	public override void ChangeTheme()
	{
		base.ChangeTheme();
		BackColor = ((base.Parent is Form) ? ETheme.Current.ColorBackDark : ETheme.Current.ColorBackCtrl);
		_body = new ELayerScroll
		{
			Dock = DockStyle.Fill
		};
		base.Controls.Add(_body);
	}

	private void DockForm(Point p)
	{
		_maxold = base.MaximumSize;
		base.MaximumSize = Size.Empty;
		_dockCtrl = base.Parent;
		if (_dockForm == null)
		{
			_dockForm = new EFormOwner
			{
				StartPosition = FormStartPosition.Manual,
				Location = p,
				Text = Text
			};
		}
		_sys.SetVisible(true, "min", "max");
		Padding padding = (_old = TabPadding);
		TabPadding = new Padding(padding.Left + 1, padding.Top + 1, padding.Right + 1, padding.Bottom + 1);
		Size size = xSize;
		Dock = DockStyle.Fill;
		_dockForm.Controls.Add(this);
		_dockForm.Show();
		_dockForm.xSize = size;
	}

	private void DockControl()
	{
		EFormMask.Current.Hide();
		_dockForm.Hide();
		base.MaximumSize = _maxold;
		BackColor = ETheme.Current.ColorBackCtrl;
		Dock = DockStyle.Right;
		_sys.SetVisible(false, "min", "max");
		TabPadding = _old;
		int num = ((base.Percent <= 0) ? base.xMinimumSize.Width : (_dockCtrl.Width * base.Percent / 100));
		if (_dockCtrl.MaximumSize.Width > 0)
		{
			num = _dockCtrl.MaximumSize.Width;
		}
		if (num > _dockCtrl.Width - base.Distance)
		{
			num = _dockCtrl.Width - base.Distance;
		}
		base.Width = num;
		_dockCtrl.Controls.Add(this);
	}

	private void ec_TextChanged(object sender, EventArgs e)
	{
		Invalidate();
	}

	public override EControl CreatePage(ISource src, string name)
	{
		EControl eControl = base[name];
		if (eControl == null)
		{
			if (_queue.Count == 0)
			{
				eControl = base.OnCreate(src, name);
			}
			else
			{
				eControl = _queue.Dequeue();
				eControl.ReplaceName(name);
			}
			Insert(eControl);
		}
		else if (eControl.Name != eControl.GetInnerName())
		{
			eControl.Load();
		}
		return eControl;
	}

	public void Insert(EControl ec)
	{
		if (!Visible)
		{
			if (base.Parent != null && base.Parent.Width > 0)
			{
				base.Width = base.Parent.Width * 40 / 100;
				base.Percent = base.Width * 100 / base.Parent.Width;
			}
			Visible = true;
		}
		base.Pages.Insert(0, ec);
		if (base.Pages.Count > 10)
		{
			int idx = base.Pages.Count - 1;
			EControl eControl = this[idx];
			if (eControl != null)
			{
				Remove(eControl);
			}
		}
		if (ec != null)
		{
			ec.TextChanged += ec_TextChanged;
		}
		Page = ec;
		ec.Load();
		Invalidate();
	}

	public void Append(EControl ec)
	{
		if (!Visible)
		{
			base.Width = base.Parent.Width * 40 / 100;
			base.Percent = base.Width * 100 / base.Parent.Width;
			Visible = true;
		}
		base.Pages.Add(ec);
		ec.TextChanged += ec_TextChanged;
		Page = ec;
		ec.Load();
		Invalidate();
	}

	public void Remove(EControl ec)
	{
		base.Pages.Remove(ec);
		_dict.Remove(ec.Name);
		ec.TextChanged -= ec_TextChanged;
		if (base.Pages.Count == 0)
		{
			Page = null;
			if (_sys.Visible)
			{
				Visible = false;
			}
			base.OnRemove(ec);
		}
		else if (Page == ec)
		{
			OnChange(base.Pages[0]);
		}
		ec.Reset();
		_queue.Enqueue(ec);
	}

	public override void Remove(string key)
	{
		EControl eControl = this[key];
		if (eControl != null)
		{
			Remove(eControl);
		}
	}

	public void Clear(bool isclose = true)
	{
		for (int i = 0; i < base.Pages.Count; i++)
		{
			EControl eControl = base.Pages[i];
			base.OnRemove(eControl);
			eControl.Reset();
			_queue.Enqueue(eControl);
		}
		base.Pages.Clear();
		_dict.Clear();
		Page = null;
		if (isclose)
		{
			Visible = false;
		}
	}

	public void Init()
	{
		base.Pages.Clear();
		_dict.Clear();
		_queue.Clear();
	}

	protected virtual void OnClose()
	{
		try
		{
			Clear();
		}
		catch
		{
		}
	}

	protected override void OnChange(EControl ec)
	{
		Page = ec;
		base.OnChange(ec);
	}

	protected virtual void OnRightClick()
	{
		if (this.RightClick != null)
		{
			this.RightClick(this, EventArgs.Empty);
		}
		else if (RightText == "刷新")
		{
			Page?.Load();
		}
	}

	protected override void OnResize(EventArgs e)
	{
		try
		{
			_sys.xLocation = new Point(HeadRight, (HeadHeight - _sys.Height) / 2);
			PerformLayout();
			Invalidate(HeadRect);
		}
		catch
		{
		}
	}

	protected override void OnMouseMove(MouseEventArgs e)
	{
		try
		{
			if (e.Button == MouseButtons.Left)
			{
				if (_rx.Contains(base.Mouse))
				{
					return;
				}
				if (base.Parent is Form form)
				{
					Point position = Cursor.Position;
					form.Location = new Point(position.X - base.Mouse.X, position.Y - base.Mouse.Y);
					if (_dockCtrl == null)
					{
						return;
					}
					Rectangle r = _dockCtrl.ClientRectangle;
					if (r.Width > 30)
					{
						r = new Rectangle(r.Right - 30, r.Top, 30, r.Height);
					}
					r = _dockCtrl.RectangleToScreen(r);
					EFormMask current = EFormMask.Current;
					if (r.Contains(position))
					{
						if (!current.Visible)
						{
							current.Size = xSize;
							current.Location = new Point(r.Right - base.Width, r.Top);
							current.Show();
						}
					}
					else if (current.Visible)
					{
						current.Hide();
					}
				}
				else
				{
					Point location = e.Location;
					if (base.LastSplit != Rectangle.Empty)
					{
						DrawSplitHelper(location);
					}
				}
				return;
			}
			Point location2 = e.Location;
			if (_rx.Contains(location2))
			{
				return;
			}
			if (Dock == DockStyle.Right && base.BorderRect.Contains(e.Location))
			{
				Cursor = Cursors.SizeWE;
				return;
			}
			if (FreshRect.Contains(location2))
			{
				IsFresh = true;
				return;
			}
			IsFresh = false;
			if (_sys.MouseMove(e))
			{
				Cursor = Cursors.Hand;
				Invalidate(_sys.DisplayRectangle);
				return;
			}
			_ = ETheme.Current;
			_ = Page;
			int num = base.BorderLeft + TabPadding.Left;
			int num2 = HeadRight - 55;
			int num3 = num;
			int y = (int)Math.Ceiling((double)TabPadding.Top + (double)((base.FontHeight + _cell.Vertical - 11) / 2));
			_hover = null;
			if (e.Y > HeadHeight)
			{
				Cursor = Cursors.Default;
				return;
			}
			foreach (EControl page in base.Pages)
			{
				int num4 = page.TextWidth + _cell.Horizontal + XWidth;
				if (num3 + num4 >= num2)
				{
					break;
				}
				if (e.X >= num3 && e.X < num3 + num4)
				{
					_hover = page;
					Cursor = Cursors.Hand;
					Point location3 = new Point(num3 + num4 - _cell.Right / 2 - XWidth, y);
					Rectangle rx = new Rectangle(location3, new Size(XWidth, XWidth));
					if (rx.Contains(e.Location))
					{
						_rx = rx;
						if (_xc != page)
						{
							_xc = page;
							Invalidate(HeadRect);
							return;
						}
						break;
					}
					break;
				}
				num3 += num4;
			}
			if (_xc != null)
			{
				_rx = default(Rectangle);
				_xc = null;
				Invalidate(HeadRect);
			}
			if (_hover == null)
			{
				Cursor = Cursors.Default;
			}
		}
		catch
		{
		}
	}

	protected override void OnMouseDown(MouseEventArgs e)
	{
		try
		{
			base.OnMouseDown(e);
			if (e.Button == MouseButtons.Left)
			{
				停靠.Hide();
				_isdown = true;
				if (_xc != null)
				{
					Invalidate(HeadRect);
				}
				else if (_sys.MouseDown())
				{
					Invalidate(_sys.DisplayRectangle);
				}
				else if (_hover != null && _hover != Page)
				{
					OnChange(_hover);
				}
			}
			else if (e.Button == MouseButtons.Right && HeadRect.Contains(e.Location))
			{
				停靠.Tag = this;
				停靠.Show(PointToScreen(e.Location));
			}
		}
		catch
		{
		}
	}

	protected override void OnMouseUp(MouseEventArgs e)
	{
		try
		{
			_isdown = false;
			base.OnMouseUp(e);
			if (e.Button != MouseButtons.Left)
			{
				return;
			}
			if (_xc != null)
			{
				if (!_rx.Contains(e.Location))
				{
					_xc = null;
				}
				Invalidate(HeadRect);
			}
			else if (_sys.MouseUp())
			{
				Invalidate(_sys.DisplayRectangle);
			}
			if (EFormMask.Current.Visible)
			{
				DockControl();
			}
		}
		catch
		{
		}
	}

	protected override void OnMouseLeave(EventArgs e)
	{
		if (_rx.Left > 0)
		{
			ETheme current = ETheme.Current;
			EControl page = Page;
			if (!_fixed)
			{
				using Graphics g = CreateGraphics();
				Color color = ((page == _hover) ? current.ColorBorderFocus : current.ColorBorder);
				Color borderColor = ((page == _hover) ? current.ColorTextBack : HeadColor);
				EPaint.DrawClose(g, _rx.Location, color, borderColor);
			}
		}
		else if (_sys.Leave())
		{
			Invalidate(_sys.DisplayRectangle);
		}
		_hover = null;
		_rx = Rectangle.Empty;
		Cursor = Cursors.Default;
	}

	protected override void OnMouseClick(MouseEventArgs e)
	{
		try
		{
			Point location = e.Location;
			if (_rx.Contains(location))
			{
				Remove(_hover);
				_rx = Rectangle.Empty;
				_hover = null;
				Invalidate(HeadRect);
				return;
			}
			if (FreshRect.Contains(location))
			{
				OnRightClick();
				return;
			}
			switch (_sys.GetCommand())
			{
			case "min":
				if (base.Parent is EFormOwner)
				{
					((EFormOwner)base.Parent).WindowState = FormWindowState.Minimized;
				}
				break;
			case "max":
				if (base.Parent is EFormOwner)
				{
					EFormOwner eFormOwner = base.Parent as EFormOwner;
					if (eFormOwner.WindowState != FormWindowState.Maximized)
					{
						eFormOwner.WindowState = FormWindowState.Maximized;
						_sys["max"].DefaultImage = Icos.Get(IcoEnums.maxx);
					}
					else
					{
						eFormOwner.WindowState = FormWindowState.Normal;
						_sys["max"].DefaultImage = Icos.Get(IcoEnums.max);
					}
				}
				break;
			case "close":
				OnClose();
				break;
			}
		}
		catch
		{
		}
	}

	protected override void OnMouseDoubleClick(MouseEventArgs e)
	{
		if (IsForm && e.Location.Y < HeadHeight)
		{
			Form form = FindForm();
			form.WindowState = ((form.WindowState == FormWindowState.Normal) ? FormWindowState.Maximized : FormWindowState.Normal);
		}
	}

	protected override void OnPaintBackground(PaintEventArgs e)
	{
		if (!IsForm)
		{
			base.OnPaintBackground(e);
			return;
		}
		Graphics graphics = e.Graphics;
		graphics.Clear(BackColor);
		using Brush brush = new SolidBrush(ETheme.Current.ColorBackCtrl);
		graphics.FillRectangle(brush, new Rectangle(base.BorderLeft, 0, base.Width - base.BorderLeft, HeadHeight - 2));
	}

	protected override void OnPaint(PaintEventArgs e)
	{
		Graphics graphics = e.Graphics;
		ETheme current = ETheme.Current;
		_sys.Draw(graphics);
		Point point = _sys.xLocation;
		Image image = (_isfresh ? RightIconHover : RightIcon);
		EPaint.Draw(graphics, image, new Rectangle(point.X - 55, point.Y + 4, image.Width, image.Height));
		EPaint.DrawText(graphics, _rightText, current.ColorText, new Point(point.X - 55 + 20, point.Y + 2));


        if (enableMenu(base.Parent.Name))
        {

            if (whiteBtn == null && enableFunc("WhiteEnable"))
            {
                whiteBtn = new EButton();
                whiteBtn.Name = "btn白框";
                whiteBtn.Text = "白框";
                whiteBtn.Size = new Size(40, 20);
                whiteBtn.Location = new Point(point.X - 180, point.Y + 2);
                whiteBtn.Visible = true;
                whiteBtn.Enabled = true;
                this.Controls.Add(whiteBtn);
                whiteBtn.Click += whiteClick;
            }

            if (saveBtn == null && enableFunc("SaveEnable"))
            {
                saveBtn = new EButton();
                saveBtn.Name = "btn保存";
                saveBtn.Text = "保存";
                saveBtn.Size = new Size(40, 20);
                saveBtn.Location = new Point(point.X - 140, point.Y + 2);
                saveBtn.Visible = true;
                saveBtn.Enabled = true;
                this.Controls.Add(saveBtn);
                saveBtn.Click += saveClick;
            }

            if (submitBtn == null && (enableFunc("StockEnable") || enableFunc("SaveEnable")))
            {
                submitBtn = new EButton();
                submitBtn.Name = "btn提交";
                submitBtn.Text = "提交";
                submitBtn.Size = new Size(40, 20);
                submitBtn.Visible = true;
                submitBtn.Enabled = true;
                this.Controls.Add(submitBtn);
                submitBtn.Location = new Point(point.X - 100, point.Y + 2);
                submitBtn.Click += (s, e) =>
                {
                    try
                    {
                        Task.Run(() => submit2());
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(this, "提交失败" + ex.Message, "错误");
                    }
                };
            }
            if (refreshBtn == null)
            {
                refreshBtn = new EButton();
                refreshBtn.Name = "btn刷新";
                refreshBtn.Text = "刷新";
                if (enableFunc("Submit3") && enableFunc("SaveEnable"))
                {
                    refreshBtn.Text = "上传";
                }
                refreshBtn.Size = new Size(40, 20);
                refreshBtn.Location = new Point(point.X - 60, point.Y + 2);
                refreshBtn.Visible = true;
                refreshBtn.Enabled = true;
                this.Controls.Add(refreshBtn);
                refreshBtn.Click += refreshClick;
            }
        }
        else
        {

            whiteBtn = null;
            saveBtn = null;
            submitBtn = null;
            refreshBtn = null;
        }

        int headHeight = HeadHeight;
		int borderLeft = base.BorderLeft;
		EControl page = Page;
		using Pen pen = new Pen(current.ColorGrid);
		using Pen pen2 = new Pen(current.ColorTextBack);
		int x = base.Width - borderLeft + 1;
		graphics.DrawLine(pen, borderLeft, headHeight - 2, x, headHeight - 2);
		graphics.DrawLine(pen2, borderLeft, headHeight - 1, x, headHeight - 1);
		borderLeft += TabPadding.Left;
		using (new SolidBrush(ForeColor))
		{
			int num = base.FontHeight + _cell.Vertical;
			int y = (int)Math.Ceiling((double)TabPadding.Top + (double)((num - 11) / 2));
			int num2 = HeadRight - 55;
			for (int i = 0; i < base.Pages.Count; i++)
			{
				EControl eControl = base.Pages[i];
				x = eControl.TextWidth + _cell.Horizontal + XWidth;
				if (borderLeft + x >= num2)
				{
					if (eControl == page)
					{
						base.Pages.Remove(eControl);
						base.Pages.Insert(0, eControl);
						Invalidate(HeadRect);
						break;
					}
				}
				else
				{
					Rectangle r = new Rectangle(borderLeft, TabPadding.Top, x, num - 1);
					if (eControl == page)
					{
						EPaint.DrawRect(graphics, r);
					}
					else if (i > 0 && page != base.Pages[i - 1])
					{
						graphics.DrawLine(pen, borderLeft, TabPadding.Top + _cell.Top, borderLeft, TabPadding.Top + _cell.Top + base.FontHeight);
						graphics.DrawLine(pen2, borderLeft + 1, TabPadding.Top + _cell.Top, borderLeft + 1, TabPadding.Top + _cell.Top + base.FontHeight);
					}
					EPaint.DrawText(graphics, eControl.Text, current.ColorText, new Rectangle(r.Left + _cell.Left, r.Top + _cell.Top, r.Width - _cell.Horizontal, r.Height - _cell.Vertical));
					Color color;
					Color borderColor;
					if (eControl == _xc)
					{
						color = (_isdown ? Color.Red : current.ColorBorderFocus);
						borderColor = (_isdown ? Color.Red : current.ColorBorderFocus);
					}
					else
					{
						color = ((eControl == page) ? current.ColorBorderFocus : current.ColorBorder);
						borderColor = ((eControl == page) ? current.ColorTextBack : HeadColor);
					}
					if (!_fixed)
					{
						EPaint.DrawClose(graphics, new Point(r.Right - _cell.Right / 2 - XWidth, y), color, borderColor);
					}
				}
				borderLeft += x;
			}
		}
	}


	private async Task save4(bool white) {
        int totalPage = 2;
        long totalCount = 0;
        int lastPage = -1;
		long totalCount2 = 0;
		List<string> lastIds = null;
		for (int i = 1; i <= totalPage; i++)
		{
			ETurn eTurn = null;
			EGallery eGallery = null;
			foreach (EControl con in base.Parent.Controls[0].Controls)
			{
				if (con is EGallery eg && eg.Name.Equals("grid"))
				{
					eGallery = eg;
				}
				if (con is ETurn a && a.Name.Equals("PTurn"))
				{
					eTurn = a;
					if (lastPage == -1)
					{
						lastPage = eTurn.Page;
					}
				}
			}
			eTurn.Page = i;
			eTurn.MyChange();
			eGallery.Invalidate();
			Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
			totalPage = eTurn.TotalPages;
			List<string> ids = eGallery.Cells.Select(c => c.Name).ToList();
	
            int errorTime = 0;
            while (lastIds != null && Cotiains(ids, lastIds) && errorTime < 10)
            {
                //Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                eGallery.Invalidate();
                Thread.Sleep(errorTime * GetFuncConfig("pageWaitMs", 1000));
                ids = eGallery.Cells.Select(c => c.Name).ToList();
                errorTime++;
            }
            this.Invoke(() =>
			{
				Page.Name = ids.First();
				Page.Load();
			});
            Detail.Sale sale = (Detail.Sale)Page;
            Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
            while (sale.Loading || !sale.Visible || !sale.Enabled)
            {
                Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
            }
            totalCount += ids.Count();
			lastIds = ids;
            totalCount2 += await saveAll(ids, false, i, white);
		
            if (i == totalPage)
            {
                eTurn.Page = lastPage;
                eTurn.MyChange();
                eGallery.Invalidate();
                Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
            }
        }
		MessageBox.Show(this, $"操作完成，共{totalCount}个, {totalCount2}张图片");

    }

	private void whiteClick(object sender, EventArgs e) {
        if (Page == null || Page.Name.IsNullOrEmpty() || !enableMenu(base.Parent.Name))
        {
            return;
        }
        Task.Run(() => save4(true));
    }


    private void saveClick(object sender, EventArgs e)
    {
        if (Page == null || Page.Name.IsNullOrEmpty() || !enableMenu(base.Parent.Name))
        {
            return;
        }

		DialogResult res = MessageBox.Show(this,"开启分页保存？", "确认",
			 MessageBoxButtons.YesNo, MessageBoxIcon.Question);
		if (res == DialogResult.Yes)
		{
			Task.Run(() => save4(false));
		}
		else { 
            List<string> ids = new List<string>();
            foreach (EControl con in base.Parent.Controls[0].Controls)
            {
                if (con is EGallery eg && eg.Name.Equals("grid"))
                {
                    ids = eg.Cells.Select(c => c.Name).ToList();
                }
            }
            Task.Run(() => saveAll(ids));
        }
    }

    private const string SUBMIT = "submit.txt";


    private async Task<int> saveAll(List<string> ids, bool show = true, int pageNum =1, bool white = false)
    {
        int pallelNum = GetFuncConfig("savePallelNum");
        object zClient = Page.GetType().BaseType.GetField("_zc", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(Page);
        if (zClient == null)
        {
            MessageBox.Show(this, "Collect ZClient is Null", "错误");
            return 0;
        }

        FieldInfo commandField = zClient.GetType().GetField("Command");
        commandField.SetValue(zClient, "spider.detail");
        MethodInfo posAsync = zClient.GetType().GetMethod("PostAsync", BindingFlags.Instance | BindingFlags.Public, null, new Type[2]
        {
        typeof(string),
        typeof(string)
        }, null);

        string logtime = pageNum+ "-"+ DateTimeOffset.Now.ToString("yyyy-MM-dd HH-mm-ss") ;
        string logpath = Path.GetFullPath("log/" + logtime + "/");
        if (!Directory.Exists(logpath))
        {
            Directory.CreateDirectory(logpath);
        }

        List<Task> tasks = new List<Task>();
        string errorMsg = string.Empty;
        int count = 0;
        int total = 0;
        int retryTime = 0;
        EPic picTmp = null;
		List<EImage> eImages = new List<EImage>(); 
        foreach (EControl con in Page.Controls)
        {
            if (con is EPic epic && epic.Name.Equals("epic"))
            {
                picTmp = epic;
                foreach (Control control in picTmp.Controls)
                {
                    if (control is EImage eImage && eImage.Url.Length > 0)
                    {
                        eImages.Add(eImage);
                    }
                }
                break;
            }
        }
        if (picTmp == null || eImages.Count <=0 )
        {
            MessageBox.Show( this, "picTmp or eImages is Null", "错误");
            return 0;
        }

        while (ids.Count > 0 && retryTime < 5)
        {
            count = 0;
            foreach (string id in ids)
            {
                if (id.Length == 0 || !Regex.IsMatch(id, @"^-?\d+$"))
                {
                    continue;
                }

                if (id.StartsWith("[Page"))
                {
                    ETurn eTurn = null;
                    EGallery eGallery = null;

                    foreach (EControl con in base.Parent.Controls[0].Controls)
                    {
                        if (con is EGallery eg && eg.Name.Equals("grid"))
                        {
                            eGallery = eg;
                        }
                        if (con is ETurn a && a.Name.Equals("PTurn"))
                        {
                            eTurn = a;
                        }
                    }
                    int page = id.IsNullOrEmpty() ? 1 : int.Parse(id.Split("]")[0].Replace("[Page:", ""));
                    if (eTurn.Page != page)
                    {
                        eGallery.Invoke(() =>
                        {
                            eTurn.Page = page;
                            eTurn.MyChange();
                            eGallery.Invalidate();
                        });

                        //eGallery.Invalidate();
                        Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                    }
                    continue;

                }

				try
				{
					int errTime = 0;
					if (white)
					{
                        this.Invoke(() => whiteBtn.Text = id);
                    }
					else {
                        this.Invoke(() => saveBtn.Text = id);
                    }
						
					RecordSet set = null;
					JsonArray root = null;
					while ((set == null || set.Count <= 0 || root == null) && errTime < 120)
					{
						try
						{
							object[] parameters2 = new object[2] { "id", id };
							object paraTask = posAsync.Invoke(zClient, parameters2);
							Task task2 = paraTask as Task;
							Type type2 = paraTask.GetType().GetGenericArguments()[0];
							PropertyInfo paraProperty = typeof(Task<>).MakeGenericType(type2).GetProperty("Result");
							await task2;

							object value2 = paraProperty.GetValue(paraTask);
							set = (value2.GetType().GetField("RS").GetValue(value2) as RecordSet);
							if (set == null)
							{
								errTime++;
								this.Invoke(() =>
								{
									Page.Name = id;
									Page?.Load();
								});
                                
                                Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                                Detail.Sale sale = (Detail.Sale)Page;
                                while (sale.Loading || !sale.Visible || !sale.Enabled)
                                {
                                    Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                                }
								eImages.Clear();
                                foreach (EControl con in Page.Controls)
                                {
                                    if (con is EPic epic && epic.Name.Equals("epic"))
                                    {
                                        picTmp = epic;
                                        foreach (Control control in picTmp.Controls)
                                        {
                                            if (control is EImage eImage && eImage.Url.Length > 0)
                                            {
                                                eImages.Add(eImage);
                                            }
                                        }
                                        break;
                                    }
                                }

                                zClient = Page.GetType().BaseType.GetField("_zc", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(Page);
								if (zClient == null)
								{
									MessageBox.Show("Collect ZClient is Null");
									// return;
								}

								commandField = zClient.GetType().GetField("Command");
								commandField.SetValue(zClient, "spider.detail");
								posAsync = zClient.GetType().GetMethod("PostAsync", BindingFlags.Instance | BindingFlags.Public, null, new Type[2]
								{
						typeof(string),
						typeof(string)
								}, null);
							}

							string text = set.ToJson();
							if (text.IsNullOrEmpty())
							{
								errTime++;
								continue;
							}
							File.WriteAllText(logpath + "text-" + id + ".json", text);
							File.WriteAllBytes(logpath + id + ".data", set.ToBytes());

							JsonObject jsonObject = JsonObject.Create(text);
							root = jsonObject.GetArray("root");
							if (root.Count == 0 || root[0].GetLong("sale_id") <= 0)
							{
								errTime++;
								continue;
							}
						}
						catch (Exception e)
						{
							File.AppendAllLines(logpath + "text.error", [e.Message]);
							if(e.Message.Contains("数据不合法") || e.Message.Contains("数据不匹配"))
                            {
								throw e;
							}
						}
					}


                    //JsonObject.Create(File.ReadAllText("C:\\ZYing\\log\\2025-03-30 14-02-47\\text-383831467.json"))
                    // .GetArray("root");

          
                    total++;
					foreach (JsonObject node in root)
					{
						HashSet<string> list = node.GetArray("sale_pic").Select(c => c.ToString()).ToHashSet();
						if (list.Count == 0)
						{
							//errorMsg += $"id {id} sale_pic为空！\n";
							List<string> stockList = [.. node.GetArray("sale_stock").Select(c => c.Get("pic").ToString())];

							foreach (string stock in stockList)
							{
								stock.Split(",").ToList().ForEach(c => list.Add(c));
							}
						}

						if (list.Count == 0)
						{
							errorMsg += $"id {id} 图片为空！\n";
                            File.AppendAllLines(logpath + "text.error", [errorMsg]);
                        }

                        foreach (string line in list)
						{
							if (line.Length <= 0)
							{
								continue;
							}

							if (tasks.Count < eImages.Count)
							{
								EImage img = eImages[tasks.Count];
								img.Url = line;
								if (white)
								{
                                    tasks.Add(img.MyWhite(id));
                                }
								else {
                                    tasks.Add(img.MySave(id));
                                }
								
							}
							else
							{
								await Task.WhenAll(tasks);
								tasks.Clear();
								EImage img = eImages[0];
                                img.Url = line;
								if (white)
								{
									tasks.Add(img.MyWhite(id));
								}
								else {
                                    tasks.Add(img.MySave(id));
                                }
									
                            }
						}
					}

                    await Task.WhenAll(tasks);
                    tasks.Clear();
                }
				catch (Exception ex)
				{

					File.AppendAllLines(logpath + "text.error", [ex.Message]);
					if (ex.Message.Contains("数据不合法") || ex.Message.Contains("数据不匹配")) {
						string fn = Path.Combine(EImage.Get图片目录(), id);
						File.AppendAllLines(fn + "/error.txt", [ex.Message]);
                        this.Invoke(() =>
                        {
                            Page.Name = id;
                            Page?.Load();
                        });

                        Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                        Detail.Sale sale = (Detail.Sale)Page;
                        while (sale.Loading || !sale.Visible || !sale.Enabled)
                        {
                            Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                        }
                        eImages.Clear();
                        foreach (EControl con in Page.Controls)
                        {
                            if (con is EPic epic && epic.Name.Equals("epic"))
                            {
                                picTmp = epic;
                                foreach (Control control in picTmp.Controls)
                                {
                                    if (control is EImage eImage && eImage.Url.Length > 0)
                                    {
                                        eImages.Add(eImage);
                                    }
                                }
                                break;
                            }
                        }
                    }
				}
            }
          
            retryTime++;

            List<string> notProcess = new List<string>();
            List<string> processs = new DirectoryInfo(EImage.Get图片目录()).GetDirectories().Select(c => c.Name).ToList();

			
            foreach (string id in ids)
            {
                if (!processs.Contains(id))
                {
                    notProcess.Add(id);
				}
				else { count++; }
            }
            ids = notProcess;
        }

		if (white)
		{
            this.Invoke(() => whiteBtn.Text = "白框");
        }
		else {
            this.Invoke(() => saveBtn.Text = "保存");
        }
		
		if (show)
		{
			if (errorMsg.IsNullOrEmpty())
			{
				MessageBox.Show(this, $"操作成功！\n 共处理{total}个商品,共{count} 张图片", "信息");
			}
			else
			{
              //  File.AppendAllLines(logpath + "text.error", [ex.Message]);
                MessageBox.Show(this, $"部分未保存请检查！\n " + errorMsg +
					$"共处理{total}个商品,共{count} 张图片,\n请点击image查看.", "错误");
			}
		}
		return count;
    }


    private void processSubmit2(List<string> ids, bool save = false)
    {
        int n = 0;
        ETheme.Release(Page);
        string logpath = Path.GetFullPath("log/");
        if (!Directory.Exists(logpath))
        {
            Directory.CreateDirectory(logpath);
        }
        string logName = logpath + "submit-" + DateTimeOffset.Now.ToString("yyyy-MM-dd") + ".log";


        for (int i = 0; i < ids.Count; i++)
        {
            try
            {
                string id = ids[i];
                ETurn eTurn = null;
                EGallery eGallery = null;

                foreach (EControl con in base.Parent.Controls[0].Controls)
                {
                    if (con is EGallery eg && eg.Name.Equals("grid"))
                    {
                        eGallery = eg;
                    }
                    if (con is ETurn a && a.Name.Equals("PTurn"))
                    {
                        eTurn = a;
                    }
                }

                if (id.IsNullOrEmpty())
                {
                    File.AppendAllLines(logName, [$"id {id} 行读取为空异常！"]);
                    continue;
                }

                if (eGallery == null || eGallery.Cells.Count <= 0)
                {
                    eGallery.Invalidate();
                    i--;
                    Thread.Sleep(100);
                    File.AppendAllLines(logName, [$"id {id} eGallery为空！"]);
                    continue;
                }

                if (id.StartsWith("[Page"))
                {
                    n = 0;
                    int page = id.IsNullOrEmpty() ? 1 : int.Parse(id.Split("]")[0].Replace("[Page:", ""));
                    if (eTurn.Page != page)
                    {
                        eTurn.Page = page;
                        eTurn.MyChange();
                        eGallery.Load();
                        //eGallery.Invalidate();
                        File.AppendAllLines(logName, [$"id {id} 行切页"]);
                        Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                    }

                    continue;
                }
                this.Invoke(() =>
                {

                    Page.Name = id;
                    Page.Load();
                    //Invalidate();
                    //CreatePage(eGallery, id);

                });
                Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                n++;
                string idName = null;
                int errorTime = 0;
                while (idName.IsNullOrEmpty() || !Regex.IsMatch(idName, @"^-?\d+$"))
                {
                    Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                    foreach (EControl con in Page.Controls)
                    {
                        if (con is ELabel label && label.Name.Equals("lblID") && !label.Text.IsNullOrEmpty())
                        {
                            idName = label.Text;
                        }
                    }
                    errorTime++;
                    if (errorTime > 60)
                    {
                        this.Invoke(() =>
                        {
                            Page?.Load();
                        });
                        Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                    }
                    if (errorTime > 600)
                    {
                        File.AppendAllLines(logName, [id + "实在找不到ID进行下一个"]);
                        continue;
                    }
                }


                EStockEdit tableTmp = null;
                EButton buttonTmp = null;
                EButton button2Tmp = null;
                EText allTmp = null;
                EPic picTmp = null;

                //Server.Instance.Load(this);
                foreach (EControl con in Page.Controls)
                {
                    ETheme.Release(con);
                    if (con is EStockEdit eg && eg.Name.Equals("vtbl"))
                    {
                        tableTmp = eg;
                    }
                    if (con is EButton btn1 && btn1.Name.Equals("btnSubmit1"))
                    {
                        buttonTmp = btn1;
                    }
                    if (con is EButton btn2 && btn2.Name.Equals("btnBottom"))
                    {
                        button2Tmp = btn2;
                    }
                    if (con is ECheck repeat && repeat.Name.Equals("chk清理重复"))
                    {
                        repeat.Checked = true;
                    }
                    if (con is EPic epic && epic.Name.Equals("epic"))
                    {
                        picTmp = epic;
                    }
                    if (con is Detail.SaleLayer sl && sl.Name.Equals("inner"))
                    {

                        foreach (EControl con1 in sl.Controls)
                        {

                            if (con1 is ETextUnit tu && tu.Name.Equals("txtNum"))
                            {

                                foreach (EControl con2 in con1.Controls)
                                {

                                    if (con2 is EText tu2)
                                    {
                                        allTmp = tu2;
                                        break;
                                    }
                                }
                                break;
                            }

                        }
                    }
                }




                int size = 0;
                bool imgFunc = false;
                if (picTmp != null && enableFunc("SaveEnable") && !save)
                {
                    bool no_replaced = true;
                    while (no_replaced)
                    {
                        foreach (EControl con in picTmp.Controls)
                        {
                            if (con is EImage eImage && eImage.Url.Length > 0)
                            {
                                int waitTime = 10;
                                while (eImage.State == ImageState.Loading && waitTime > 0)
                                {
                                    Thread.Sleep(500);
                                    waitTime--;
                                }

                                if (OSS.IsFile(eImage.Url) && !File.Exists(eImage.Url))
                                {

                                    //picTmp.OnRemove(eImage.Url);
                                }
                                else
                                {
                                    this.Invoke(() =>
                                    {
                                        eImage.MyReplace(picTmp.Prefix);
                                    });
                                    size++;

                                }
                            }
                        }
                        no_replaced = false;

                        foreach (EControl con in picTmp.Controls)
                        {
                            if (con is EImage eImage && eImage.Url.Length > 0)
                            {
                                if (!OSS.IsFile(eImage.Url) && eImage.MyExist(idName))
                                {
                                    no_replaced = true;
                                }
                            }
                        }
                        Thread.Sleep(100);

                    }
                    imgFunc = true;

                }


                int num = 0;
                if (enableFunc("StockEnable") && File.Exists("stock.json"))
                {

                    JsonArray config = JsonArray.Create(File.ReadAllText("stock.json"));
                    bool modify = true;
                    foreach (ETRow row in tableTmp.Rows)
                    {
                        foreach (ETCell cell in row.Cells)
                        {
                            foreach (JsonElement item in config)
                            {
                                if (cell.Name == item.GetString("key"))
                                {
                                    num++;
                                    cell.Text = getRandomNum(item.GetString("value"));
                                    modify = false;
                                }
                            }
                        }
                    }

                    if (modify && allTmp != null)
                    {
                        foreach (JsonElement item in config)
                        {
                            if (!item.GetString("key").Equals("num"))
                            {
                                continue;
                            }
                            num++;
                            allTmp.Text = getRandomNum(item.GetString("value"));
                        }
                    }

                }
                // 获取私有方法的 MethodInfo 对象
                MethodInfo methodInfo = Page.GetType().GetMethod("btnSubmit_Click", BindingFlags.NonPublic | BindingFlags.Instance);
                //submitStatus = imgFunc ? 1 : 2;
                //submiting = 1;

                if (methodInfo != null)
                {
                    // 调用私有方法
                    File.AppendAllLines(logName, [$"提交 {idName}，图片【{size}】，变体【{num}】 "]);
                    methodInfo.Invoke(Page, new object[] { buttonTmp == null ? button2Tmp : buttonTmp, EventArgs.Empty });
                }
                //Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                string idName2 = null;
                string loaderOK = null;

                errorTime = 0;
                Detail.Sale sale = (Detail.Sale)Page;

                while (sale.Loading || !sale.Visible || !sale.Enabled)
                {
                    errorTime++;
                    Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                }

                errorTime = 0;
                while (idName2.IsNullOrEmpty() || !Regex.IsMatch(idName2, @"^-?\d+$") || loaderOK.IsNullOrWhiteSpace())
                {
                    Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                    foreach (EControl con in Page.Controls)
                    {
                        if (con is ELabel label && label.Name.Equals("lblID") && !label.Text.IsNullOrEmpty())
                        {
                            idName2 = label.Text;
                        }

                        if (con is ELoader loader && loader.Name.Equals("loaderOK"))
                        {
                            loaderOK = loader.Text;
                        }
                    }

                    errorTime++;
                    if (errorTime > 60)
                    {
                        this.Invoke(() =>
                        {
                            Page?.Load();
                        });
                        File.AppendAllLines(logName, [id + "等待刷新尝试"]);
                        Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                    }
                    if (errorTime > 500)
                    {
                        File.AppendAllLines(logName, [id + "等待提交超时，进行下一个"]);
                        continue;
                    }

                }

                if (save)
                {
                    string dir = EImage.Get图片目录();
                    if (dir.Length <= 0)
                    {
                        continue;
                    }

                    if (picTmp != null)
                    {
                        foreach (Control control in picTmp.Controls)
                        {
                            if (control is EImage eImage && eImage.Url.Length > 0)
                            {
                                eImage.Saving(dir, false).Wait();
                                size++;
                            }
                        }
                    }

                }

            

                if (picTmp != null && enableFunc("SaveEnable") && !save)
                {
                    foreach (EControl con in picTmp.Controls)
                    {
                        if (con is EImage eImage && eImage.Url.Length > 0)
                        {
                            //size++;
                            if (OSS.IsFile(eImage.Url))
                            {
                                if (!File.Exists(eImage.Url))
                                {
                                    continue;
                                }

                                i--;
                                //MessageBox.Show($"图片 {eImage.Url} 为本地状态，重新提交", "错误");
                                break;
                            }
                            if (OSS.IsRemote(eImage.Url))
                            {
                                i--;
                                //MessageBox.Show($"图片 {eImage.Url} 为远程状态，重新提交！", "错误");
                                break;
                            }
                        }
                    }
                }
                File.AppendAllLines(logName, ["提交完成:[" + idName2 + "]，图片【" + size + "】个，变体【" + num + "】个"]);

            }
            catch (Exception ex)
            {
                File.AppendAllLines(logName, [$"第【{i}】个提交异常，重试" + ex.Message]);
                i--;
            }
        }

    }


    private static bool first = true;
	private volatile bool paging = false;
    private async Task submit2()
    {

        if (Page == null || Page.Name.IsNullOrEmpty() || !enableMenu(base.Parent.Name))
        {
            return;
        }

        if (!File.Exists(SUBMIT))
        {
			paging = true;
            first = false;
            GetAllSku(SUBMIT);
			paging = false;
            return;
        }
        if (first)
        {
            first = false;
            return;
        }
        else
        {
            first = true;
        }
		while (paging) {
			Thread.Sleep(100);
		}

        List<string> ids = [.. File.ReadAllLines(SUBMIT)];
        int count = ids.Where(c => !c.StartsWith("[Page")).Count();
        File.Delete(SUBMIT);

        DialogResult res = MessageBox.Show(this, $"读取到上次未提交的 【{count}】个，是否继续？", "确认",
            MessageBoxButtons.YesNo, MessageBoxIcon.Question);
        if (res == DialogResult.No)
        {
            GetAllSku(SUBMIT);
            return;
        }

        int finalSkipNum = GetFuncConfig("FinalMaxNum", 366);
        if (ids.Count > finalSkipNum)
        {
            File.AppendAllLines(SUBMIT, ids.Skip(finalSkipNum));
            ids = ids.Take(finalSkipNum).ToList();
        }
        HashSet<string> needProcessId = new HashSet<string>();
        processSubmit2(ids);
        MessageBox.Show(this, $"结束-已完成:{count}个", "确认");
    }

    private static string getRandomNum(string value)
    {
        if (value.IsNullOrEmpty() || !value.Contains("-"))
        {
            return value;
        }
        string[] split = value.Split("-");
        int min = int.Parse(split[0]);
        int max = int.Parse(split[1]);
        if (min > max)
        {
            int temp = min;
            min = max;
            max = temp;
        }
        int randomNumber = new Random().Next(min, max);
        return randomNumber.ToString();
    }



    private void refreshClick(object sender, EventArgs e)
	{
		Page?.Load();
	}

    private async Task GetAllSku(string fileName)
    {
        int totalPage = 2;
        long totalCount = 0;
        int lastPage = -1;
		List<string> lastIds = null;
        for (int i = 1; i <= totalPage; i++)
        {
            ETurn eTurn = null;
            EGallery eGallery = null;
            foreach (EControl con in base.Parent.Controls[0].Controls)
            {
                if (con is EGallery eg && eg.Name.Equals("grid"))
                {
                    eGallery = eg;
                }
                if (con is ETurn a && a.Name.Equals("PTurn"))
                {
                    eTurn = a;
                    if (lastPage == -1)
                    {
                        lastPage = eTurn.Page;
                    }

                }
            }
            eTurn.Page = i;
            eTurn.MyChange();
            eGallery.Invalidate();
            Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
            totalPage = eTurn.TotalPages;
            List<string> ids = eGallery.Cells.Select(c => c.Name).ToList();
            int errorTime = 0;
            while (lastIds != null && Cotiains(ids, lastIds) && errorTime < 10)
            {
                //Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
                eGallery.Invalidate();
                Thread.Sleep(errorTime * GetFuncConfig("pageWaitMs", 1000));
                ids = eGallery.Cells.Select(c => c.Name).ToList();
                errorTime++;
            }

            totalCount += ids.Count();
			lastIds = ids;
            File.AppendAllLines(fileName, [$"[Page:{i}][Size:{ids.Count()}][TotalPage:{totalPage}]"]);
            File.AppendAllLines(fileName, ids);
            if (i == totalPage)
            {
                eTurn.Page = lastPage;
                eTurn.MyChange();
                eGallery.Invalidate();
                Thread.Sleep(GetFuncConfig("pageWaitMs", 1000));
            }
        }
    }

	private static bool Cotiains(List<string> src, List<string> target) {
		if (src.Count <= 0) {
			return false;
		}
		foreach (string id in src) {
			if (target.Contains(id)) {
				return true;
			}
		}
		return false;
	}


    private static bool enableMenu(string name)
    {
        if (!File.Exists("stock_config.json"))
        {
            return false;
        }

        JsonObject jsonObject = JsonObject.Create(File.ReadAllText("stock_config.json"));
        string menu = jsonObject.GetString("Menu");

        return menu.IsNullOrEmpty() ? false : menu.Contains(name);
    }


    private static bool enableFunc(string name)
    {
        if (!File.Exists("stock_config.json"))
        {
            return false;
        }

        JsonObject jsonObject = JsonObject.Create(File.ReadAllText("stock_config.json"));
        string value = jsonObject.GetString(name);

        return value.IsNullOrEmpty() ? false : value == "true";
    }

    private static int GetFuncConfig(string name, int def = 20)
    {
        if (!File.Exists("stock_config.json"))
        {
            return def;
        }

        JsonObject jsonObject = JsonObject.Create(File.ReadAllText("stock_config.json"));
        string value = jsonObject.GetString(name);
        return value.IsNullOrEmpty() ? def : int.Parse(value);
    }

}
